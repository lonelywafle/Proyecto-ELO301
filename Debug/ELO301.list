
ELO301.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004868  08004868  00014868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004970  08004970  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004970  08004970  00014970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004978  08004978  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004978  08004978  00014978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800497c  0800497c  0001497c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  080049f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  080049f0  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfa5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf8  00000000  00000000  0002d045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002ec40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a38  00000000  00000000  0002f730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022734  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d19b  00000000  00000000  0005289c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1a99  00000000  00000000  0005fa37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001314d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003040  00000000  00000000  00131520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004850 	.word	0x08004850

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004850 	.word	0x08004850

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ADS1220_Select>:
    ADS1220_SendCommand(ADS1220_RESET_CMD);
    HAL_Delay(10); // Tiempo de inicialización
}

// Función para habilitar el ADS1220 (CS bajo)
void ADS1220_Select(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000592:	f000 fe83 	bl	800129c <HAL_GPIO_WritePin>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <ADS1220_ReadData>:
    //ADS1220_Select();
   HAL_SPI_Transmit(ads1220_spi_handle, &command, 1, HAL_MAX_DELAY);
    //ADS1220_Deselect();
}

void ADS1220_ReadData(int32_t *data){
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	uint8_t RawData[3]={0};
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <ADS1220_ReadData+0x58>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	813b      	strh	r3, [r7, #8]
 80005aa:	2300      	movs	r3, #0
 80005ac:	72bb      	strb	r3, [r7, #10]

	int pin_status=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 80005ae:	2180      	movs	r1, #128	; 0x80
 80005b0:	4811      	ldr	r0, [pc, #68]	; (80005f8 <ADS1220_ReadData+0x5c>)
 80005b2:	f000 fe5b 	bl	800126c <HAL_GPIO_ReadPin>
 80005b6:	4603      	mov	r3, r0
 80005b8:	60fb      	str	r3, [r7, #12]

	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7)==GPIO_PIN_SET);
 80005ba:	bf00      	nop
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <ADS1220_ReadData+0x5c>)
 80005c0:	f000 fe54 	bl	800126c <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d0f8      	beq.n	80005bc <ADS1220_ReadData+0x20>

	HAL_SPI_Receive(&hspi1, RawData, 3, HAL_MAX_DELAY);
 80005ca:	f107 0108 	add.w	r1, r7, #8
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	2203      	movs	r2, #3
 80005d4:	4809      	ldr	r0, [pc, #36]	; (80005fc <ADS1220_ReadData+0x60>)
 80005d6:	f002 fa84 	bl	8002ae2 <HAL_SPI_Receive>

	*data =((int32_t)(RawData[0]<<16)|(RawData[1]<<8)|RawData[2]);
 80005da:	7a3b      	ldrb	r3, [r7, #8]
 80005dc:	041a      	lsls	r2, r3, #16
 80005de:	7a7b      	ldrb	r3, [r7, #9]
 80005e0:	021b      	lsls	r3, r3, #8
 80005e2:	4313      	orrs	r3, r2
 80005e4:	7aba      	ldrb	r2, [r7, #10]
 80005e6:	431a      	orrs	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	601a      	str	r2, [r3, #0]
		//if (*data & 0x800000){

		//	*data|=0xFF000000;
		//}

}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	08004868 	.word	0x08004868
 80005f8:	48000800 	.word	0x48000800
 80005fc:	2000008c 	.word	0x2000008c

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b096      	sub	sp, #88	; 0x58
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fb31 	bl	8000c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f89f 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f95d 	bl	80008cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000612:	f000 f92b 	bl	800086c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000616:	f000 f8eb 	bl	80007f0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ADS1220_Select();//!CS=0
 800061a:	f7ff ffb3 	bl	8000584 <ADS1220_Select>

  //Say something
  uart_buf_len=sprintf(uart_buf,"SPI test:\r\n");
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	4944      	ldr	r1, [pc, #272]	; (8000734 <main+0x134>)
 8000624:	4618      	mov	r0, r3
 8000626:	f003 fca5 	bl	8003f74 <siprintf>
 800062a:	6578      	str	r0, [r7, #84]	; 0x54
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 800062c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800062e:	b29a      	uxth	r2, r3
 8000630:	f107 0120 	add.w	r1, r7, #32
 8000634:	2364      	movs	r3, #100	; 0x64
 8000636:	4840      	ldr	r0, [pc, #256]	; (8000738 <main+0x138>)
 8000638:	f002 ffa0 	bl	800357c <HAL_UART_Transmit>

  //Leer registros 0 y 1 ADC
  uint8_t command_leer=0x21;
 800063c:	2321      	movs	r3, #33	; 0x21
 800063e:	72fb      	strb	r3, [r7, #11]
  uint8_t recive_data[2];

  HAL_SPI_Transmit(&hspi1, &command_leer, 1, HAL_MAX_DELAY);
 8000640:	f107 010b 	add.w	r1, r7, #11
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2201      	movs	r2, #1
 800064a:	483c      	ldr	r0, [pc, #240]	; (800073c <main+0x13c>)
 800064c:	f002 f8db 	bl	8002806 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, recive_data, 2, HAL_MAX_DELAY);
 8000650:	f107 0108 	add.w	r1, r7, #8
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	2202      	movs	r2, #2
 800065a:	4838      	ldr	r0, [pc, #224]	; (800073c <main+0x13c>)
 800065c:	f002 fa41 	bl	8002ae2 <HAL_SPI_Receive>

  //Envio uart
  uart_buf_len=sprintf(uart_buf,"Registro 0: 0x%02X, Registro 1: 0x%02X\r\n",recive_data[0],recive_data[1]);
 8000660:	7a3b      	ldrb	r3, [r7, #8]
 8000662:	461a      	mov	r2, r3
 8000664:	7a7b      	ldrb	r3, [r7, #9]
 8000666:	f107 0020 	add.w	r0, r7, #32
 800066a:	4935      	ldr	r1, [pc, #212]	; (8000740 <main+0x140>)
 800066c:	f003 fc82 	bl	8003f74 <siprintf>
 8000670:	6578      	str	r0, [r7, #84]	; 0x54
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000674:	b29a      	uxth	r2, r3
 8000676:	f107 0120 	add.w	r1, r7, #32
 800067a:	2364      	movs	r3, #100	; 0x64
 800067c:	482e      	ldr	r0, [pc, #184]	; (8000738 <main+0x138>)
 800067e:	f002 ff7d 	bl	800357c <HAL_UART_Transmit>

  //escribir registro 1 CM=1
  uint8_t command_escribir=0x44;
 8000682:	2344      	movs	r3, #68	; 0x44
 8000684:	71fb      	strb	r3, [r7, #7]
  uint8_t gain2=0b0100;
 8000686:	2304      	movs	r3, #4
 8000688:	71bb      	strb	r3, [r7, #6]

  HAL_SPI_Transmit(&hspi1, &command_escribir, 1, HAL_MAX_DELAY);
 800068a:	1df9      	adds	r1, r7, #7
 800068c:	f04f 33ff 	mov.w	r3, #4294967295
 8000690:	2201      	movs	r2, #1
 8000692:	482a      	ldr	r0, [pc, #168]	; (800073c <main+0x13c>)
 8000694:	f002 f8b7 	bl	8002806 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &gain2, 1, HAL_MAX_DELAY);
 8000698:	1db9      	adds	r1, r7, #6
 800069a:	f04f 33ff 	mov.w	r3, #4294967295
 800069e:	2201      	movs	r2, #1
 80006a0:	4826      	ldr	r0, [pc, #152]	; (800073c <main+0x13c>)
 80006a2:	f002 f8b0 	bl	8002806 <HAL_SPI_Transmit>

  //Se recomienda luego de Write CM=1, realizar un START CMD
  uint8_t start_command=ADS1220_START_SYNC_CMD;
 80006a6:	2308      	movs	r3, #8
 80006a8:	717b      	strb	r3, [r7, #5]
  HAL_SPI_Transmit(&hspi1, &start_command, 1, HAL_MAX_DELAY);
 80006aa:	1d79      	adds	r1, r7, #5
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295
 80006b0:	2201      	movs	r2, #1
 80006b2:	4822      	ldr	r0, [pc, #136]	; (800073c <main+0x13c>)
 80006b4:	f002 f8a7 	bl	8002806 <HAL_SPI_Transmit>

  //Leer reg
  HAL_SPI_Transmit(&hspi1, &command_leer, 1, HAL_MAX_DELAY);
 80006b8:	f107 010b 	add.w	r1, r7, #11
 80006bc:	f04f 33ff 	mov.w	r3, #4294967295
 80006c0:	2201      	movs	r2, #1
 80006c2:	481e      	ldr	r0, [pc, #120]	; (800073c <main+0x13c>)
 80006c4:	f002 f89f 	bl	8002806 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, recive_data, 2, HAL_MAX_DELAY);
 80006c8:	f107 0108 	add.w	r1, r7, #8
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295
 80006d0:	2202      	movs	r2, #2
 80006d2:	481a      	ldr	r0, [pc, #104]	; (800073c <main+0x13c>)
 80006d4:	f002 fa05 	bl	8002ae2 <HAL_SPI_Receive>

  //Envio uart
  uart_buf_len=sprintf(uart_buf,"Registro Nuevo 0: 0x%02X, Registro Nuevo 1: 0x%02X\r\n",recive_data[0],recive_data[1]);
 80006d8:	7a3b      	ldrb	r3, [r7, #8]
 80006da:	461a      	mov	r2, r3
 80006dc:	7a7b      	ldrb	r3, [r7, #9]
 80006de:	f107 0020 	add.w	r0, r7, #32
 80006e2:	4918      	ldr	r1, [pc, #96]	; (8000744 <main+0x144>)
 80006e4:	f003 fc46 	bl	8003f74 <siprintf>
 80006e8:	6578      	str	r0, [r7, #84]	; 0x54
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80006ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	f107 0120 	add.w	r1, r7, #32
 80006f2:	2364      	movs	r3, #100	; 0x64
 80006f4:	4810      	ldr	r0, [pc, #64]	; (8000738 <main+0x138>)
 80006f6:	f002 ff41 	bl	800357c <HAL_UART_Transmit>


  uart_buf[50]=0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int32_t conversionResult;
  while (1)
  {
	  ADS1220_ReadData(&conversionResult);
 8000700:	463b      	mov	r3, r7
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff4a 	bl	800059c <ADS1220_ReadData>

	  uart_buf_len=sprintf(uart_buf,"Data read: 0x%02X \r\n",conversionResult);
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	490e      	ldr	r1, [pc, #56]	; (8000748 <main+0x148>)
 8000710:	4618      	mov	r0, r3
 8000712:	f003 fc2f 	bl	8003f74 <siprintf>
 8000716:	6578      	str	r0, [r7, #84]	; 0x54
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800071a:	b29a      	uxth	r2, r3
 800071c:	f107 0120 	add.w	r1, r7, #32
 8000720:	2364      	movs	r3, #100	; 0x64
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <main+0x138>)
 8000724:	f002 ff2a 	bl	800357c <HAL_UART_Transmit>

	  HAL_Delay(1000);
 8000728:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800072c:	f000 fb1a 	bl	8000d64 <HAL_Delay>
	  ADS1220_ReadData(&conversionResult);
 8000730:	e7e6      	b.n	8000700 <main+0x100>
 8000732:	bf00      	nop
 8000734:	0800486c 	.word	0x0800486c
 8000738:	200000f0 	.word	0x200000f0
 800073c:	2000008c 	.word	0x2000008c
 8000740:	08004878 	.word	0x08004878
 8000744:	080048a4 	.word	0x080048a4
 8000748:	080048dc 	.word	0x080048dc

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b096      	sub	sp, #88	; 0x58
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	2244      	movs	r2, #68	; 0x44
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f003 fc02 	bl	8003f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	463b      	mov	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800076e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000772:	f000 fdb9 	bl	80012e8 <HAL_PWREx_ControlVoltageScaling>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800077c:	f000 f912 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000780:	2302      	movs	r3, #2
 8000782:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000788:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078a:	2340      	movs	r3, #64	; 0x40
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000792:	2302      	movs	r3, #2
 8000794:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800079a:	230a      	movs	r3, #10
 800079c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800079e:	2307      	movs	r3, #7
 80007a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fdf0 	bl	8001394 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007ba:	f000 f8f3 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2303      	movs	r3, #3
 80007c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007d2:	463b      	mov	r3, r7
 80007d4:	2104      	movs	r1, #4
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 f9f0 	bl	8001bbc <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007e2:	f000 f8df 	bl	80009a4 <Error_Handler>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3758      	adds	r7, #88	; 0x58
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_SPI1_Init+0x74>)
 80007f6:	4a1c      	ldr	r2, [pc, #112]	; (8000868 <MX_SPI1_Init+0x78>)
 80007f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_SPI1_Init+0x74>)
 80007fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000800:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_SPI1_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_SPI1_Init+0x74>)
 800080a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800080e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_SPI1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_SPI1_Init+0x74>)
 8000818:	2201      	movs	r2, #1
 800081a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_SPI1_Init+0x74>)
 800081e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000822:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_SPI1_Init+0x74>)
 8000826:	2228      	movs	r2, #40	; 0x28
 8000828:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_SPI1_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_SPI1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_SPI1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_SPI1_Init+0x74>)
 800083e:	2207      	movs	r2, #7
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_SPI1_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_SPI1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_SPI1_Init+0x74>)
 8000850:	f001 ff36 	bl	80026c0 <HAL_SPI_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800085a:	f000 f8a3 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000008c 	.word	0x2000008c
 8000868:	40013000 	.word	0x40013000

0800086c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 8000872:	4a15      	ldr	r2, [pc, #84]	; (80008c8 <MX_USART2_UART_Init+0x5c>)
 8000874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_USART2_UART_Init+0x58>)
 80008b0:	f002 fe16 	bl	80034e0 <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ba:	f000 f873 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000f0 	.word	0x200000f0
 80008c8:	40004400 	.word	0x40004400

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	4b2e      	ldr	r3, [pc, #184]	; (800099c <MX_GPIO_Init+0xd0>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a2d      	ldr	r2, [pc, #180]	; (800099c <MX_GPIO_Init+0xd0>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b2b      	ldr	r3, [pc, #172]	; (800099c <MX_GPIO_Init+0xd0>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	4b28      	ldr	r3, [pc, #160]	; (800099c <MX_GPIO_Init+0xd0>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a27      	ldr	r2, [pc, #156]	; (800099c <MX_GPIO_Init+0xd0>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b25      	ldr	r3, [pc, #148]	; (800099c <MX_GPIO_Init+0xd0>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b22      	ldr	r3, [pc, #136]	; (800099c <MX_GPIO_Init+0xd0>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a21      	ldr	r2, [pc, #132]	; (800099c <MX_GPIO_Init+0xd0>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b1f      	ldr	r3, [pc, #124]	; (800099c <MX_GPIO_Init+0xd0>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <MX_GPIO_Init+0xd0>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a1b      	ldr	r2, [pc, #108]	; (800099c <MX_GPIO_Init+0xd0>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <MX_GPIO_Init+0xd0>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000948:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800094c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4811      	ldr	r0, [pc, #68]	; (80009a0 <MX_GPIO_Init+0xd4>)
 800095a:	f000 fb0d 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_DRDY_Pin */
  GPIO_InitStruct.Pin = SPI1_DRDY_Pin;
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_DRDY_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	480b      	ldr	r0, [pc, #44]	; (80009a0 <MX_GPIO_Init+0xd4>)
 8000972:	f000 fb01 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800097a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098e:	f000 faf3 	bl	8000f78 <HAL_GPIO_Init>

}
 8000992:	bf00      	nop
 8000994:	3728      	adds	r7, #40	; 0x28
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000
 80009a0:	48000800 	.word	0x48000800

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	e7fe      	b.n	80009ac <Error_Handler+0x8>
	...

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_MspInit+0x44>)
 80009b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <HAL_MspInit+0x44>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6613      	str	r3, [r2, #96]	; 0x60
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_MspInit+0x44>)
 80009c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <HAL_MspInit+0x44>)
 80009d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d2:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <HAL_MspInit+0x44>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	6593      	str	r3, [r2, #88]	; 0x58
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_MspInit+0x44>)
 80009dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000

080009f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <HAL_SPI_MspInit+0x7c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d128      	bne.n	8000a6c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <HAL_SPI_MspInit+0x80>)
 8000a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1e:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <HAL_SPI_MspInit+0x80>)
 8000a20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a24:	6613      	str	r3, [r2, #96]	; 0x60
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <HAL_SPI_MspInit+0x80>)
 8000a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <HAL_SPI_MspInit+0x80>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <HAL_SPI_MspInit+0x80>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_SPI_MspInit+0x80>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a4a:	23e0      	movs	r3, #224	; 0xe0
 8000a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a5a:	2305      	movs	r3, #5
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a68:	f000 fa86 	bl	8000f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a6c:	bf00      	nop
 8000a6e:	3728      	adds	r7, #40	; 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40013000 	.word	0x40013000
 8000a78:	40021000 	.word	0x40021000

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b0a4      	sub	sp, #144	; 0x90
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2268      	movs	r2, #104	; 0x68
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f003 fa61 	bl	8003f64 <memset>
  if(huart->Instance==USART2)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <HAL_UART_MspInit+0xb0>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d13a      	bne.n	8000b22 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 faa3 	bl	8002004 <HAL_RCCEx_PeriphCLKConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ac4:	f7ff ff6e 	bl	80009a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_UART_MspInit+0xb4>)
 8000aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000acc:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <HAL_UART_MspInit+0xb4>)
 8000ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <HAL_UART_MspInit+0xb4>)
 8000ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <HAL_UART_MspInit+0xb4>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae4:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <HAL_UART_MspInit+0xb4>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aec:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <HAL_UART_MspInit+0xb4>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000af8:	230c      	movs	r3, #12
 8000afa:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b0e:	2307      	movs	r3, #7
 8000b10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1e:	f000 fa2b 	bl	8000f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b22:	bf00      	nop
 8000b24:	3790      	adds	r7, #144	; 0x90
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40004400 	.word	0x40004400
 8000b30:	40021000 	.word	0x40021000

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b80:	f000 f8d0 	bl	8000d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b90:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <_sbrk+0x5c>)
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <_sbrk+0x60>)
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d102      	bne.n	8000baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <_sbrk+0x64>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <_sbrk+0x68>)
 8000ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d207      	bcs.n	8000bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb8:	f003 f9aa 	bl	8003f10 <__errno>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	e009      	b.n	8000bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <_sbrk+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bce:	4b07      	ldr	r3, [pc, #28]	; (8000bec <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	4a05      	ldr	r2, [pc, #20]	; (8000bec <_sbrk+0x64>)
 8000bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bda:	68fb      	ldr	r3, [r7, #12]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20028000 	.word	0x20028000
 8000be8:	00000400 	.word	0x00000400
 8000bec:	20000174 	.word	0x20000174
 8000bf0:	20000190 	.word	0x20000190

08000bf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <SystemInit+0x20>)
 8000bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfe:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <SystemInit+0x20>)
 8000c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c1c:	f7ff ffea 	bl	8000bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	; (8000c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <LoopForever+0xe>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	; (8000c64 <LoopForever+0x16>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c46:	f003 f969 	bl	8003f1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c4a:	f7ff fcd9 	bl	8000600 <main>

08000c4e <LoopForever>:

LoopForever:
    b LoopForever
 8000c4e:	e7fe      	b.n	8000c4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c50:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c5c:	08004980 	.word	0x08004980
  ldr r2, =_sbss
 8000c60:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c64:	2000018c 	.word	0x2000018c

08000c68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <HAL_Init+0x3c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <HAL_Init+0x3c>)
 8000c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c80:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c82:	2003      	movs	r0, #3
 8000c84:	f000 f944 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f000 f80f 	bl	8000cac <HAL_InitTick>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d002      	beq.n	8000c9a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	71fb      	strb	r3, [r7, #7]
 8000c98:	e001      	b.n	8000c9e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c9a:	f7ff fe89 	bl	80009b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40022000 	.word	0x40022000

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <HAL_InitTick+0x6c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d023      	beq.n	8000d08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <HAL_InitTick+0x70>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <HAL_InitTick+0x6c>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f941 	bl	8000f5e <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10f      	bne.n	8000d02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d809      	bhi.n	8000cfc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f000 f919 	bl	8000f26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cf4:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <HAL_InitTick+0x74>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	e007      	b.n	8000d0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	73fb      	strb	r3, [r7, #15]
 8000d00:	e004      	b.n	8000d0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	73fb      	strb	r3, [r7, #15]
 8000d06:	e001      	b.n	8000d0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	20000004 	.word	0x20000004

08000d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x20>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x24>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_IncTick+0x24>)
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000008 	.word	0x20000008
 8000d48:	20000178 	.word	0x20000178

08000d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <HAL_GetTick+0x14>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000178 	.word	0x20000178

08000d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d6c:	f7ff ffee 	bl	8000d4c <HAL_GetTick>
 8000d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d7c:	d005      	beq.n	8000d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_Delay+0x44>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d8a:	bf00      	nop
 8000d8c:	f7ff ffde 	bl	8000d4c <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d8f7      	bhi.n	8000d8c <HAL_Delay+0x28>
  {
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000008 	.word	0x20000008

08000dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f7ff ff8e 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff47 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff5c 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff8e 	bl	8000e64 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5d 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ffb0 	bl	8000ecc <SysTick_Config>
 8000f6c:	4603      	mov	r3, r0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f86:	e154      	b.n	8001232 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	4013      	ands	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 8146 	beq.w	800122c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d005      	beq.n	8000fb8 <HAL_GPIO_Init+0x40>
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d130      	bne.n	800101a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fee:	2201      	movs	r2, #1
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	091b      	lsrs	r3, r3, #4
 8001004:	f003 0201 	and.w	r2, r3, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b03      	cmp	r3, #3
 8001024:	d017      	beq.n	8001056 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d123      	bne.n	80010aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	08da      	lsrs	r2, r3, #3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3208      	adds	r2, #8
 800106a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	220f      	movs	r2, #15
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	691a      	ldr	r2, [r3, #16]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	08da      	lsrs	r2, r3, #3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3208      	adds	r2, #8
 80010a4:	6939      	ldr	r1, [r7, #16]
 80010a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0203 	and.w	r2, r3, #3
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 80a0 	beq.w	800122c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ec:	4b58      	ldr	r3, [pc, #352]	; (8001250 <HAL_GPIO_Init+0x2d8>)
 80010ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f0:	4a57      	ldr	r2, [pc, #348]	; (8001250 <HAL_GPIO_Init+0x2d8>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	6613      	str	r3, [r2, #96]	; 0x60
 80010f8:	4b55      	ldr	r3, [pc, #340]	; (8001250 <HAL_GPIO_Init+0x2d8>)
 80010fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001104:	4a53      	ldr	r2, [pc, #332]	; (8001254 <HAL_GPIO_Init+0x2dc>)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	220f      	movs	r2, #15
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800112e:	d019      	beq.n	8001164 <HAL_GPIO_Init+0x1ec>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a49      	ldr	r2, [pc, #292]	; (8001258 <HAL_GPIO_Init+0x2e0>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d013      	beq.n	8001160 <HAL_GPIO_Init+0x1e8>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a48      	ldr	r2, [pc, #288]	; (800125c <HAL_GPIO_Init+0x2e4>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d00d      	beq.n	800115c <HAL_GPIO_Init+0x1e4>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a47      	ldr	r2, [pc, #284]	; (8001260 <HAL_GPIO_Init+0x2e8>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d007      	beq.n	8001158 <HAL_GPIO_Init+0x1e0>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a46      	ldr	r2, [pc, #280]	; (8001264 <HAL_GPIO_Init+0x2ec>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d101      	bne.n	8001154 <HAL_GPIO_Init+0x1dc>
 8001150:	2304      	movs	r3, #4
 8001152:	e008      	b.n	8001166 <HAL_GPIO_Init+0x1ee>
 8001154:	2307      	movs	r3, #7
 8001156:	e006      	b.n	8001166 <HAL_GPIO_Init+0x1ee>
 8001158:	2303      	movs	r3, #3
 800115a:	e004      	b.n	8001166 <HAL_GPIO_Init+0x1ee>
 800115c:	2302      	movs	r3, #2
 800115e:	e002      	b.n	8001166 <HAL_GPIO_Init+0x1ee>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <HAL_GPIO_Init+0x1ee>
 8001164:	2300      	movs	r3, #0
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	f002 0203 	and.w	r2, r2, #3
 800116c:	0092      	lsls	r2, r2, #2
 800116e:	4093      	lsls	r3, r2
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001176:	4937      	ldr	r1, [pc, #220]	; (8001254 <HAL_GPIO_Init+0x2dc>)
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001184:	4b38      	ldr	r3, [pc, #224]	; (8001268 <HAL_GPIO_Init+0x2f0>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011a8:	4a2f      	ldr	r2, [pc, #188]	; (8001268 <HAL_GPIO_Init+0x2f0>)
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011ae:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <HAL_GPIO_Init+0x2f0>)
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <HAL_GPIO_Init+0x2f0>)
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011d8:	4b23      	ldr	r3, [pc, #140]	; (8001268 <HAL_GPIO_Init+0x2f0>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011fc:	4a1a      	ldr	r2, [pc, #104]	; (8001268 <HAL_GPIO_Init+0x2f0>)
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <HAL_GPIO_Init+0x2f0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	43db      	mvns	r3, r3
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001226:	4a10      	ldr	r2, [pc, #64]	; (8001268 <HAL_GPIO_Init+0x2f0>)
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3301      	adds	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	fa22 f303 	lsr.w	r3, r2, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	f47f aea3 	bne.w	8000f88 <HAL_GPIO_Init+0x10>
  }
}
 8001242:	bf00      	nop
 8001244:	bf00      	nop
 8001246:	371c      	adds	r7, #28
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	40021000 	.word	0x40021000
 8001254:	40010000 	.word	0x40010000
 8001258:	48000400 	.word	0x48000400
 800125c:	48000800 	.word	0x48000800
 8001260:	48000c00 	.word	0x48000c00
 8001264:	48001000 	.word	0x48001000
 8001268:	40010400 	.word	0x40010400

0800126c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	887b      	ldrh	r3, [r7, #2]
 800127e:	4013      	ands	r3, r2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d002      	beq.n	800128a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	e001      	b.n	800128e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800128e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
 80012a8:	4613      	mov	r3, r2
 80012aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ac:	787b      	ldrb	r3, [r7, #1]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40007000 	.word	0x40007000

080012e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012f6:	d130      	bne.n	800135a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012f8:	4b23      	ldr	r3, [pc, #140]	; (8001388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001304:	d038      	beq.n	8001378 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001306:	4b20      	ldr	r3, [pc, #128]	; (8001388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800130e:	4a1e      	ldr	r2, [pc, #120]	; (8001388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001310:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001314:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2232      	movs	r2, #50	; 0x32
 800131c:	fb02 f303 	mul.w	r3, r2, r3
 8001320:	4a1b      	ldr	r2, [pc, #108]	; (8001390 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	0c9b      	lsrs	r3, r3, #18
 8001328:	3301      	adds	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800132c:	e002      	b.n	8001334 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	3b01      	subs	r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001340:	d102      	bne.n	8001348 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f2      	bne.n	800132e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001354:	d110      	bne.n	8001378 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e00f      	b.n	800137a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001366:	d007      	beq.n	8001378 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001370:	4a05      	ldr	r2, [pc, #20]	; (8001388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001376:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40007000 	.word	0x40007000
 800138c:	20000000 	.word	0x20000000
 8001390:	431bde83 	.word	0x431bde83

08001394 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	f000 bc02 	b.w	8001bac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013a8:	4b96      	ldr	r3, [pc, #600]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 030c 	and.w	r3, r3, #12
 80013b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013b2:	4b94      	ldr	r3, [pc, #592]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0310 	and.w	r3, r3, #16
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 80e4 	beq.w	8001592 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d007      	beq.n	80013e0 <HAL_RCC_OscConfig+0x4c>
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	2b0c      	cmp	r3, #12
 80013d4:	f040 808b 	bne.w	80014ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	f040 8087 	bne.w	80014ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013e0:	4b88      	ldr	r3, [pc, #544]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_OscConfig+0x64>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e3d9      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1a      	ldr	r2, [r3, #32]
 80013fc:	4b81      	ldr	r3, [pc, #516]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0308 	and.w	r3, r3, #8
 8001404:	2b00      	cmp	r3, #0
 8001406:	d004      	beq.n	8001412 <HAL_RCC_OscConfig+0x7e>
 8001408:	4b7e      	ldr	r3, [pc, #504]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001410:	e005      	b.n	800141e <HAL_RCC_OscConfig+0x8a>
 8001412:	4b7c      	ldr	r3, [pc, #496]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 8001414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001418:	091b      	lsrs	r3, r3, #4
 800141a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800141e:	4293      	cmp	r3, r2
 8001420:	d223      	bcs.n	800146a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fd8c 	bl	8001f44 <RCC_SetFlashLatencyFromMSIRange>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e3ba      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001436:	4b73      	ldr	r3, [pc, #460]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a72      	ldr	r2, [pc, #456]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	4b70      	ldr	r3, [pc, #448]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	496d      	ldr	r1, [pc, #436]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001454:	4b6b      	ldr	r3, [pc, #428]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	4968      	ldr	r1, [pc, #416]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]
 8001468:	e025      	b.n	80014b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800146a:	4b66      	ldr	r3, [pc, #408]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a65      	ldr	r2, [pc, #404]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	4b63      	ldr	r3, [pc, #396]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4960      	ldr	r1, [pc, #384]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 8001484:	4313      	orrs	r3, r2
 8001486:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001488:	4b5e      	ldr	r3, [pc, #376]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	495b      	ldr	r1, [pc, #364]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d109      	bne.n	80014b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 fd4c 	bl	8001f44 <RCC_SetFlashLatencyFromMSIRange>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e37a      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014b6:	f000 fc81 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 80014ba:	4602      	mov	r2, r0
 80014bc:	4b51      	ldr	r3, [pc, #324]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	091b      	lsrs	r3, r3, #4
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	4950      	ldr	r1, [pc, #320]	; (8001608 <HAL_RCC_OscConfig+0x274>)
 80014c8:	5ccb      	ldrb	r3, [r1, r3]
 80014ca:	f003 031f 	and.w	r3, r3, #31
 80014ce:	fa22 f303 	lsr.w	r3, r2, r3
 80014d2:	4a4e      	ldr	r2, [pc, #312]	; (800160c <HAL_RCC_OscConfig+0x278>)
 80014d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014d6:	4b4e      	ldr	r3, [pc, #312]	; (8001610 <HAL_RCC_OscConfig+0x27c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fbe6 	bl	8000cac <HAL_InitTick>
 80014e0:	4603      	mov	r3, r0
 80014e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d052      	beq.n	8001590 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	e35e      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d032      	beq.n	800155c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014f6:	4b43      	ldr	r3, [pc, #268]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a42      	ldr	r2, [pc, #264]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001502:	f7ff fc23 	bl	8000d4c <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800150a:	f7ff fc1f 	bl	8000d4c <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e347      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800151c:	4b39      	ldr	r3, [pc, #228]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001528:	4b36      	ldr	r3, [pc, #216]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a35      	ldr	r2, [pc, #212]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 800152e:	f043 0308 	orr.w	r3, r3, #8
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b33      	ldr	r3, [pc, #204]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	4930      	ldr	r1, [pc, #192]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001546:	4b2f      	ldr	r3, [pc, #188]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	492b      	ldr	r1, [pc, #172]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 8001556:	4313      	orrs	r3, r2
 8001558:	604b      	str	r3, [r1, #4]
 800155a:	e01a      	b.n	8001592 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800155c:	4b29      	ldr	r3, [pc, #164]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a28      	ldr	r2, [pc, #160]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 8001562:	f023 0301 	bic.w	r3, r3, #1
 8001566:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001568:	f7ff fbf0 	bl	8000d4c <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001570:	f7ff fbec 	bl	8000d4c <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e314      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001582:	4b20      	ldr	r3, [pc, #128]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x1dc>
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001590:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d073      	beq.n	8001686 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_OscConfig+0x21c>
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2b0c      	cmp	r3, #12
 80015a8:	d10e      	bne.n	80015c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d10b      	bne.n	80015c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d063      	beq.n	8001684 <HAL_RCC_OscConfig+0x2f0>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d15f      	bne.n	8001684 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e2f1      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d0:	d106      	bne.n	80015e0 <HAL_RCC_OscConfig+0x24c>
 80015d2:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 80015d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e025      	b.n	800162c <HAL_RCC_OscConfig+0x298>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e8:	d114      	bne.n	8001614 <HAL_RCC_OscConfig+0x280>
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 80015f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	4b03      	ldr	r3, [pc, #12]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a02      	ldr	r2, [pc, #8]	; (8001604 <HAL_RCC_OscConfig+0x270>)
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e013      	b.n	800162c <HAL_RCC_OscConfig+0x298>
 8001604:	40021000 	.word	0x40021000
 8001608:	080048f4 	.word	0x080048f4
 800160c:	20000000 	.word	0x20000000
 8001610:	20000004 	.word	0x20000004
 8001614:	4ba0      	ldr	r3, [pc, #640]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a9f      	ldr	r2, [pc, #636]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 800161a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b9d      	ldr	r3, [pc, #628]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a9c      	ldr	r2, [pc, #624]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 8001626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d013      	beq.n	800165c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fb8a 	bl	8000d4c <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fb86 	bl	8000d4c <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e2ae      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800164e:	4b92      	ldr	r3, [pc, #584]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x2a8>
 800165a:	e014      	b.n	8001686 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fb76 	bl	8000d4c <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff fb72 	bl	8000d4c <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e29a      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001676:	4b88      	ldr	r3, [pc, #544]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x2d0>
 8001682:	e000      	b.n	8001686 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d060      	beq.n	8001754 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	2b04      	cmp	r3, #4
 8001696:	d005      	beq.n	80016a4 <HAL_RCC_OscConfig+0x310>
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	2b0c      	cmp	r3, #12
 800169c:	d119      	bne.n	80016d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d116      	bne.n	80016d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a4:	4b7c      	ldr	r3, [pc, #496]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_RCC_OscConfig+0x328>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e277      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016bc:	4b76      	ldr	r3, [pc, #472]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	061b      	lsls	r3, r3, #24
 80016ca:	4973      	ldr	r1, [pc, #460]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d0:	e040      	b.n	8001754 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d023      	beq.n	8001722 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016da:	4b6f      	ldr	r3, [pc, #444]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a6e      	ldr	r2, [pc, #440]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 80016e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e6:	f7ff fb31 	bl	8000d4c <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ee:	f7ff fb2d 	bl	8000d4c <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e255      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001700:	4b65      	ldr	r3, [pc, #404]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170c:	4b62      	ldr	r3, [pc, #392]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	061b      	lsls	r3, r3, #24
 800171a:	495f      	ldr	r1, [pc, #380]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
 8001720:	e018      	b.n	8001754 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001722:	4b5d      	ldr	r3, [pc, #372]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a5c      	ldr	r2, [pc, #368]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 8001728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800172c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172e:	f7ff fb0d 	bl	8000d4c <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001736:	f7ff fb09 	bl	8000d4c <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e231      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001748:	4b53      	ldr	r3, [pc, #332]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1f0      	bne.n	8001736 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d03c      	beq.n	80017da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d01c      	beq.n	80017a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001768:	4b4b      	ldr	r3, [pc, #300]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 800176a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800176e:	4a4a      	ldr	r2, [pc, #296]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001778:	f7ff fae8 	bl	8000d4c <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001780:	f7ff fae4 	bl	8000d4c <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e20c      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001792:	4b41      	ldr	r3, [pc, #260]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 8001794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0ef      	beq.n	8001780 <HAL_RCC_OscConfig+0x3ec>
 80017a0:	e01b      	b.n	80017da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a2:	4b3d      	ldr	r3, [pc, #244]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 80017a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a8:	4a3b      	ldr	r2, [pc, #236]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 80017aa:	f023 0301 	bic.w	r3, r3, #1
 80017ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b2:	f7ff facb 	bl	8000d4c <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ba:	f7ff fac7 	bl	8000d4c <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e1ef      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017cc:	4b32      	ldr	r3, [pc, #200]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 80017ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1ef      	bne.n	80017ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 80a6 	beq.w	8001934 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e8:	2300      	movs	r3, #0
 80017ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017ec:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10d      	bne.n	8001814 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f8:	4b27      	ldr	r3, [pc, #156]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 80017fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fc:	4a26      	ldr	r2, [pc, #152]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 80017fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001802:	6593      	str	r3, [r2, #88]	; 0x58
 8001804:	4b24      	ldr	r3, [pc, #144]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 8001806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001810:	2301      	movs	r3, #1
 8001812:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001814:	4b21      	ldr	r3, [pc, #132]	; (800189c <HAL_RCC_OscConfig+0x508>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	d118      	bne.n	8001852 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001820:	4b1e      	ldr	r3, [pc, #120]	; (800189c <HAL_RCC_OscConfig+0x508>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a1d      	ldr	r2, [pc, #116]	; (800189c <HAL_RCC_OscConfig+0x508>)
 8001826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182c:	f7ff fa8e 	bl	8000d4c <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001834:	f7ff fa8a 	bl	8000d4c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e1b2      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_RCC_OscConfig+0x508>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d108      	bne.n	800186c <HAL_RCC_OscConfig+0x4d8>
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 800185c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800186a:	e029      	b.n	80018c0 <HAL_RCC_OscConfig+0x52c>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2b05      	cmp	r3, #5
 8001872:	d115      	bne.n	80018a0 <HAL_RCC_OscConfig+0x50c>
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 8001876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800187a:	4a07      	ldr	r2, [pc, #28]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 8001886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188a:	4a03      	ldr	r2, [pc, #12]	; (8001898 <HAL_RCC_OscConfig+0x504>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001894:	e014      	b.n	80018c0 <HAL_RCC_OscConfig+0x52c>
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	40007000 	.word	0x40007000
 80018a0:	4b9a      	ldr	r3, [pc, #616]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 80018a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a6:	4a99      	ldr	r2, [pc, #612]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 80018a8:	f023 0301 	bic.w	r3, r3, #1
 80018ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b0:	4b96      	ldr	r3, [pc, #600]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 80018b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b6:	4a95      	ldr	r2, [pc, #596]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 80018b8:	f023 0304 	bic.w	r3, r3, #4
 80018bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d016      	beq.n	80018f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c8:	f7ff fa40 	bl	8000d4c <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d0:	f7ff fa3c 	bl	8000d4c <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e162      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018e6:	4b89      	ldr	r3, [pc, #548]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 80018e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0ed      	beq.n	80018d0 <HAL_RCC_OscConfig+0x53c>
 80018f4:	e015      	b.n	8001922 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f6:	f7ff fa29 	bl	8000d4c <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018fc:	e00a      	b.n	8001914 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fe:	f7ff fa25 	bl	8000d4c <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	f241 3288 	movw	r2, #5000	; 0x1388
 800190c:	4293      	cmp	r3, r2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e14b      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001914:	4b7d      	ldr	r3, [pc, #500]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1ed      	bne.n	80018fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001922:	7ffb      	ldrb	r3, [r7, #31]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d105      	bne.n	8001934 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001928:	4b78      	ldr	r3, [pc, #480]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 800192a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192c:	4a77      	ldr	r2, [pc, #476]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 800192e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001932:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0320 	and.w	r3, r3, #32
 800193c:	2b00      	cmp	r3, #0
 800193e:	d03c      	beq.n	80019ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	2b00      	cmp	r3, #0
 8001946:	d01c      	beq.n	8001982 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001948:	4b70      	ldr	r3, [pc, #448]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 800194a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800194e:	4a6f      	ldr	r2, [pc, #444]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001958:	f7ff f9f8 	bl	8000d4c <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001960:	f7ff f9f4 	bl	8000d4c <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e11c      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001972:	4b66      	ldr	r3, [pc, #408]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001974:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0ef      	beq.n	8001960 <HAL_RCC_OscConfig+0x5cc>
 8001980:	e01b      	b.n	80019ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001982:	4b62      	ldr	r3, [pc, #392]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001984:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001988:	4a60      	ldr	r2, [pc, #384]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001992:	f7ff f9db 	bl	8000d4c <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800199a:	f7ff f9d7 	bl	8000d4c <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e0ff      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019ac:	4b57      	ldr	r3, [pc, #348]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 80019ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1ef      	bne.n	800199a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 80f3 	beq.w	8001baa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	f040 80c9 	bne.w	8001b60 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019ce:	4b4f      	ldr	r3, [pc, #316]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f003 0203 	and.w	r2, r3, #3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	429a      	cmp	r2, r3
 80019e0:	d12c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	3b01      	subs	r3, #1
 80019ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d123      	bne.n	8001a3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d11b      	bne.n	8001a3c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d113      	bne.n	8001a3c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1e:	085b      	lsrs	r3, r3, #1
 8001a20:	3b01      	subs	r3, #1
 8001a22:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d109      	bne.n	8001a3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	085b      	lsrs	r3, r3, #1
 8001a34:	3b01      	subs	r3, #1
 8001a36:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d06b      	beq.n	8001b14 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2b0c      	cmp	r3, #12
 8001a40:	d062      	beq.n	8001b08 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a42:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e0ac      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a2d      	ldr	r2, [pc, #180]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001a58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a5c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a5e:	f7ff f975 	bl	8000d4c <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a66:	f7ff f971 	bl	8000d4c <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e099      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a78:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f0      	bne.n	8001a66 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a84:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <HAL_RCC_OscConfig+0x77c>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a94:	3a01      	subs	r2, #1
 8001a96:	0112      	lsls	r2, r2, #4
 8001a98:	4311      	orrs	r1, r2
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a9e:	0212      	lsls	r2, r2, #8
 8001aa0:	4311      	orrs	r1, r2
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001aa6:	0852      	lsrs	r2, r2, #1
 8001aa8:	3a01      	subs	r2, #1
 8001aaa:	0552      	lsls	r2, r2, #21
 8001aac:	4311      	orrs	r1, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ab2:	0852      	lsrs	r2, r2, #1
 8001ab4:	3a01      	subs	r2, #1
 8001ab6:	0652      	lsls	r2, r2, #25
 8001ab8:	4311      	orrs	r1, r2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001abe:	06d2      	lsls	r2, r2, #27
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	4912      	ldr	r1, [pc, #72]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ac8:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0f      	ldr	r2, [pc, #60]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ad2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ad4:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4a0c      	ldr	r2, [pc, #48]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ade:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ae0:	f7ff f934 	bl	8000d4c <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff f930 	bl	8000d4c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e058      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b06:	e050      	b.n	8001baa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e04f      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d144      	bne.n	8001baa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b20:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a23      	ldr	r2, [pc, #140]	; (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4a20      	ldr	r2, [pc, #128]	; (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b38:	f7ff f908 	bl	8000d4c <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b40:	f7ff f904 	bl	8000d4c <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e02c      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0x7ac>
 8001b5e:	e024      	b.n	8001baa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	2b0c      	cmp	r3, #12
 8001b64:	d01f      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b72:	f7ff f8eb 	bl	8000d4c <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7ff f8e7 	bl	8000d4c <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e00f      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f0      	bne.n	8001b7a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	4905      	ldr	r1, [pc, #20]	; (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_RCC_OscConfig+0x824>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60cb      	str	r3, [r1, #12]
 8001ba4:	e001      	b.n	8001baa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3720      	adds	r7, #32
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	feeefffc 	.word	0xfeeefffc

08001bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0e7      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b75      	ldr	r3, [pc, #468]	; (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d910      	bls.n	8001c00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b72      	ldr	r3, [pc, #456]	; (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 0207 	bic.w	r2, r3, #7
 8001be6:	4970      	ldr	r1, [pc, #448]	; (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bee:	4b6e      	ldr	r3, [pc, #440]	; (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0cf      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d010      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	4b66      	ldr	r3, [pc, #408]	; (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d908      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1c:	4b63      	ldr	r3, [pc, #396]	; (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	4960      	ldr	r1, [pc, #384]	; (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d04c      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c42:	4b5a      	ldr	r3, [pc, #360]	; (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d121      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e0a6      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c5a:	4b54      	ldr	r3, [pc, #336]	; (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d115      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e09a      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c72:	4b4e      	ldr	r3, [pc, #312]	; (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d109      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e08e      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c82:	4b4a      	ldr	r3, [pc, #296]	; (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e086      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c92:	4b46      	ldr	r3, [pc, #280]	; (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f023 0203 	bic.w	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4943      	ldr	r1, [pc, #268]	; (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ca4:	f7ff f852 	bl	8000d4c <HAL_GetTick>
 8001ca8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cac:	f7ff f84e 	bl	8000d4c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e06e      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 020c 	and.w	r2, r3, #12
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d1eb      	bne.n	8001cac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d010      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	4b31      	ldr	r3, [pc, #196]	; (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d208      	bcs.n	8001d02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	4b2e      	ldr	r3, [pc, #184]	; (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	492b      	ldr	r1, [pc, #172]	; (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d02:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d210      	bcs.n	8001d32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d10:	4b25      	ldr	r3, [pc, #148]	; (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f023 0207 	bic.w	r2, r3, #7
 8001d18:	4923      	ldr	r1, [pc, #140]	; (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d20:	4b21      	ldr	r3, [pc, #132]	; (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e036      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d008      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	4918      	ldr	r1, [pc, #96]	; (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d009      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4910      	ldr	r1, [pc, #64]	; (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d70:	f000 f824 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	091b      	lsrs	r3, r3, #4
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	490b      	ldr	r1, [pc, #44]	; (8001db0 <HAL_RCC_ClockConfig+0x1f4>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8c:	4a09      	ldr	r2, [pc, #36]	; (8001db4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_RCC_ClockConfig+0x1fc>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe ff89 	bl	8000cac <HAL_InitTick>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d9e:	7afb      	ldrb	r3, [r7, #11]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40022000 	.word	0x40022000
 8001dac:	40021000 	.word	0x40021000
 8001db0:	080048f4 	.word	0x080048f4
 8001db4:	20000000 	.word	0x20000000
 8001db8:	20000004 	.word	0x20000004

08001dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dca:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd4:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0x34>
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	2b0c      	cmp	r3, #12
 8001de8:	d121      	bne.n	8001e2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d11e      	bne.n	8001e2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001df0:	4b34      	ldr	r3, [pc, #208]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d107      	bne.n	8001e0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dfc:	4b31      	ldr	r3, [pc, #196]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	e005      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e18:	4a2b      	ldr	r2, [pc, #172]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10d      	bne.n	8001e44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d102      	bne.n	8001e3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e34:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	e004      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e40:	4b23      	ldr	r3, [pc, #140]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	2b0c      	cmp	r3, #12
 8001e48:	d134      	bne.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d003      	beq.n	8001e62 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d003      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0xac>
 8001e60:	e005      	b.n	8001e6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e62:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e64:	617b      	str	r3, [r7, #20]
      break;
 8001e66:	e005      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e68:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e6a:	617b      	str	r3, [r7, #20]
      break;
 8001e6c:	e002      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	617b      	str	r3, [r7, #20]
      break;
 8001e72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e74:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	3301      	adds	r3, #1
 8001e80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	0a1b      	lsrs	r3, r3, #8
 8001e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	fb03 f202 	mul.w	r2, r3, r2
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	0e5b      	lsrs	r3, r3, #25
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001eb4:	69bb      	ldr	r3, [r7, #24]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3724      	adds	r7, #36	; 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	0800490c 	.word	0x0800490c
 8001ecc:	00f42400 	.word	0x00f42400
 8001ed0:	007a1200 	.word	0x007a1200

08001ed4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000000 	.word	0x20000000

08001eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ef0:	f7ff fff0 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	4904      	ldr	r1, [pc, #16]	; (8001f14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f02:	5ccb      	ldrb	r3, [r1, r3]
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	08004904 	.word	0x08004904

08001f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f1c:	f7ff ffda 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001f20:	4602      	mov	r2, r0
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	0adb      	lsrs	r3, r3, #11
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	4904      	ldr	r1, [pc, #16]	; (8001f40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f2e:	5ccb      	ldrb	r3, [r1, r3]
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	08004904 	.word	0x08004904

08001f44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f50:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f5c:	f7ff f9b6 	bl	80012cc <HAL_PWREx_GetVoltageRange>
 8001f60:	6178      	str	r0, [r7, #20]
 8001f62:	e014      	b.n	8001f8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f64:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	4a24      	ldr	r2, [pc, #144]	; (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f70:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f7c:	f7ff f9a6 	bl	80012cc <HAL_PWREx_GetVoltageRange>
 8001f80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f82:	4b1e      	ldr	r3, [pc, #120]	; (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	4a1d      	ldr	r2, [pc, #116]	; (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f94:	d10b      	bne.n	8001fae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b80      	cmp	r3, #128	; 0x80
 8001f9a:	d919      	bls.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2ba0      	cmp	r3, #160	; 0xa0
 8001fa0:	d902      	bls.n	8001fa8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	e013      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fa8:	2301      	movs	r3, #1
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	e010      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b80      	cmp	r3, #128	; 0x80
 8001fb2:	d902      	bls.n	8001fba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	e00a      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b80      	cmp	r3, #128	; 0x80
 8001fbe:	d102      	bne.n	8001fc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	e004      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b70      	cmp	r3, #112	; 0x70
 8001fca:	d101      	bne.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fcc:	2301      	movs	r3, #1
 8001fce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f023 0207 	bic.w	r2, r3, #7
 8001fd8:	4909      	ldr	r1, [pc, #36]	; (8002000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fe0:	4b07      	ldr	r3, [pc, #28]	; (8002000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d001      	beq.n	8001ff2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40022000 	.word	0x40022000

08002004 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800200c:	2300      	movs	r3, #0
 800200e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002010:	2300      	movs	r3, #0
 8002012:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800201c:	2b00      	cmp	r3, #0
 800201e:	d031      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002024:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002028:	d01a      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800202a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800202e:	d814      	bhi.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002030:	2b00      	cmp	r3, #0
 8002032:	d009      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002034:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002038:	d10f      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800203a:	4b5d      	ldr	r3, [pc, #372]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	4a5c      	ldr	r2, [pc, #368]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002044:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002046:	e00c      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3304      	adds	r3, #4
 800204c:	2100      	movs	r1, #0
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fa44 	bl	80024dc <RCCEx_PLLSAI1_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002058:	e003      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	74fb      	strb	r3, [r7, #19]
      break;
 800205e:	e000      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002060:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002062:	7cfb      	ldrb	r3, [r7, #19]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10b      	bne.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002068:	4b51      	ldr	r3, [pc, #324]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	494e      	ldr	r1, [pc, #312]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800207e:	e001      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 809e 	beq.w	80021ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002096:	4b46      	ldr	r3, [pc, #280]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80020a6:	2300      	movs	r3, #0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00d      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ac:	4b40      	ldr	r3, [pc, #256]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b0:	4a3f      	ldr	r2, [pc, #252]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b6:	6593      	str	r3, [r2, #88]	; 0x58
 80020b8:	4b3d      	ldr	r3, [pc, #244]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c4:	2301      	movs	r3, #1
 80020c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c8:	4b3a      	ldr	r3, [pc, #232]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a39      	ldr	r2, [pc, #228]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020d4:	f7fe fe3a 	bl	8000d4c <HAL_GetTick>
 80020d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020da:	e009      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020dc:	f7fe fe36 	bl	8000d4c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d902      	bls.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	74fb      	strb	r3, [r7, #19]
        break;
 80020ee:	e005      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020f0:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0ef      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80020fc:	7cfb      	ldrb	r3, [r7, #19]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d15a      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002102:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800210c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01e      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	429a      	cmp	r2, r3
 800211c:	d019      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800211e:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002128:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800212a:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800212c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002130:	4a1f      	ldr	r2, [pc, #124]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800213a:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800213c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002140:	4a1b      	ldr	r2, [pc, #108]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800214a:	4a19      	ldr	r2, [pc, #100]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d016      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215c:	f7fe fdf6 	bl	8000d4c <HAL_GetTick>
 8002160:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002162:	e00b      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002164:	f7fe fdf2 	bl	8000d4c <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d902      	bls.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	74fb      	strb	r3, [r7, #19]
            break;
 800217a:	e006      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0ec      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800218a:	7cfb      	ldrb	r3, [r7, #19]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10b      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002190:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002196:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800219e:	4904      	ldr	r1, [pc, #16]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021a6:	e009      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021a8:	7cfb      	ldrb	r3, [r7, #19]
 80021aa:	74bb      	strb	r3, [r7, #18]
 80021ac:	e006      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021b8:	7cfb      	ldrb	r3, [r7, #19]
 80021ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021bc:	7c7b      	ldrb	r3, [r7, #17]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d105      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c2:	4b9e      	ldr	r3, [pc, #632]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	4a9d      	ldr	r2, [pc, #628]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00a      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021da:	4b98      	ldr	r3, [pc, #608]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e0:	f023 0203 	bic.w	r2, r3, #3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4994      	ldr	r1, [pc, #592]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00a      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021fc:	4b8f      	ldr	r3, [pc, #572]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002202:	f023 020c 	bic.w	r2, r3, #12
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	498c      	ldr	r1, [pc, #560]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800221e:	4b87      	ldr	r3, [pc, #540]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002224:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	4983      	ldr	r1, [pc, #524]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00a      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002240:	4b7e      	ldr	r3, [pc, #504]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224e:	497b      	ldr	r1, [pc, #492]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002262:	4b76      	ldr	r3, [pc, #472]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002268:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	4972      	ldr	r1, [pc, #456]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002284:	4b6d      	ldr	r3, [pc, #436]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	496a      	ldr	r1, [pc, #424]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022a6:	4b65      	ldr	r3, [pc, #404]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b4:	4961      	ldr	r1, [pc, #388]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022c8:	4b5c      	ldr	r3, [pc, #368]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d6:	4959      	ldr	r1, [pc, #356]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00a      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022ea:	4b54      	ldr	r3, [pc, #336]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f8:	4950      	ldr	r1, [pc, #320]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800230c:	4b4b      	ldr	r3, [pc, #300]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002312:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231a:	4948      	ldr	r1, [pc, #288]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800232e:	4b43      	ldr	r3, [pc, #268]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002330:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002334:	f023 0203 	bic.w	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	493f      	ldr	r1, [pc, #252]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d028      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002350:	4b3a      	ldr	r3, [pc, #232]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002356:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800235e:	4937      	ldr	r1, [pc, #220]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800236a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800236e:	d106      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002370:	4b32      	ldr	r3, [pc, #200]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4a31      	ldr	r2, [pc, #196]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800237a:	60d3      	str	r3, [r2, #12]
 800237c:	e011      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002382:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002386:	d10c      	bne.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3304      	adds	r3, #4
 800238c:	2101      	movs	r1, #1
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f8a4 	bl	80024dc <RCCEx_PLLSAI1_Config>
 8002394:	4603      	mov	r3, r0
 8002396:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002398:	7cfb      	ldrb	r3, [r7, #19]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800239e:	7cfb      	ldrb	r3, [r7, #19]
 80023a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d028      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023ae:	4b23      	ldr	r3, [pc, #140]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023bc:	491f      	ldr	r1, [pc, #124]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023cc:	d106      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ce:	4b1b      	ldr	r3, [pc, #108]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	4a1a      	ldr	r2, [pc, #104]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023d8:	60d3      	str	r3, [r2, #12]
 80023da:	e011      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023e4:	d10c      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2101      	movs	r1, #1
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 f875 	bl	80024dc <RCCEx_PLLSAI1_Config>
 80023f2:	4603      	mov	r3, r0
 80023f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023f6:	7cfb      	ldrb	r3, [r7, #19]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d02b      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	4908      	ldr	r1, [pc, #32]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800242a:	d109      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4a02      	ldr	r2, [pc, #8]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002436:	60d3      	str	r3, [r2, #12]
 8002438:	e014      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002444:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002448:	d10c      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3304      	adds	r3, #4
 800244e:	2101      	movs	r1, #1
 8002450:	4618      	mov	r0, r3
 8002452:	f000 f843 	bl	80024dc <RCCEx_PLLSAI1_Config>
 8002456:	4603      	mov	r3, r0
 8002458:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800245a:	7cfb      	ldrb	r3, [r7, #19]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01c      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	4916      	ldr	r1, [pc, #88]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800248e:	d10c      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3304      	adds	r3, #4
 8002494:	2102      	movs	r1, #2
 8002496:	4618      	mov	r0, r3
 8002498:	f000 f820 	bl	80024dc <RCCEx_PLLSAI1_Config>
 800249c:	4603      	mov	r3, r0
 800249e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024a0:	7cfb      	ldrb	r3, [r7, #19]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80024a6:	7cfb      	ldrb	r3, [r7, #19]
 80024a8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80024b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c4:	4904      	ldr	r1, [pc, #16]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000

080024dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024ea:	4b74      	ldr	r3, [pc, #464]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d018      	beq.n	8002528 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024f6:	4b71      	ldr	r3, [pc, #452]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f003 0203 	and.w	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d10d      	bne.n	8002522 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
       ||
 800250a:	2b00      	cmp	r3, #0
 800250c:	d009      	beq.n	8002522 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800250e:	4b6b      	ldr	r3, [pc, #428]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	091b      	lsrs	r3, r3, #4
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
       ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d047      	beq.n	80025b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
 8002526:	e044      	b.n	80025b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d018      	beq.n	8002562 <RCCEx_PLLSAI1_Config+0x86>
 8002530:	2b03      	cmp	r3, #3
 8002532:	d825      	bhi.n	8002580 <RCCEx_PLLSAI1_Config+0xa4>
 8002534:	2b01      	cmp	r3, #1
 8002536:	d002      	beq.n	800253e <RCCEx_PLLSAI1_Config+0x62>
 8002538:	2b02      	cmp	r3, #2
 800253a:	d009      	beq.n	8002550 <RCCEx_PLLSAI1_Config+0x74>
 800253c:	e020      	b.n	8002580 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800253e:	4b5f      	ldr	r3, [pc, #380]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d11d      	bne.n	8002586 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800254e:	e01a      	b.n	8002586 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002550:	4b5a      	ldr	r3, [pc, #360]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002558:	2b00      	cmp	r3, #0
 800255a:	d116      	bne.n	800258a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002560:	e013      	b.n	800258a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002562:	4b56      	ldr	r3, [pc, #344]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10f      	bne.n	800258e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800256e:	4b53      	ldr	r3, [pc, #332]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d109      	bne.n	800258e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800257e:	e006      	b.n	800258e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
      break;
 8002584:	e004      	b.n	8002590 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002586:	bf00      	nop
 8002588:	e002      	b.n	8002590 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800258a:	bf00      	nop
 800258c:	e000      	b.n	8002590 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800258e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002590:	7bfb      	ldrb	r3, [r7, #15]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10d      	bne.n	80025b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002596:	4b49      	ldr	r3, [pc, #292]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6819      	ldr	r1, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	430b      	orrs	r3, r1
 80025ac:	4943      	ldr	r1, [pc, #268]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d17c      	bne.n	80026b2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025b8:	4b40      	ldr	r3, [pc, #256]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a3f      	ldr	r2, [pc, #252]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80025be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c4:	f7fe fbc2 	bl	8000d4c <HAL_GetTick>
 80025c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025ca:	e009      	b.n	80025e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025cc:	f7fe fbbe 	bl	8000d4c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d902      	bls.n	80025e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	73fb      	strb	r3, [r7, #15]
        break;
 80025de:	e005      	b.n	80025ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025e0:	4b36      	ldr	r3, [pc, #216]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1ef      	bne.n	80025cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d15f      	bne.n	80026b2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d110      	bne.n	800261a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025f8:	4b30      	ldr	r3, [pc, #192]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002600:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6892      	ldr	r2, [r2, #8]
 8002608:	0211      	lsls	r1, r2, #8
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68d2      	ldr	r2, [r2, #12]
 800260e:	06d2      	lsls	r2, r2, #27
 8002610:	430a      	orrs	r2, r1
 8002612:	492a      	ldr	r1, [pc, #168]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002614:	4313      	orrs	r3, r2
 8002616:	610b      	str	r3, [r1, #16]
 8002618:	e027      	b.n	800266a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d112      	bne.n	8002646 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002620:	4b26      	ldr	r3, [pc, #152]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002628:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6892      	ldr	r2, [r2, #8]
 8002630:	0211      	lsls	r1, r2, #8
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6912      	ldr	r2, [r2, #16]
 8002636:	0852      	lsrs	r2, r2, #1
 8002638:	3a01      	subs	r2, #1
 800263a:	0552      	lsls	r2, r2, #21
 800263c:	430a      	orrs	r2, r1
 800263e:	491f      	ldr	r1, [pc, #124]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002640:	4313      	orrs	r3, r2
 8002642:	610b      	str	r3, [r1, #16]
 8002644:	e011      	b.n	800266a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002646:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800264e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6892      	ldr	r2, [r2, #8]
 8002656:	0211      	lsls	r1, r2, #8
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6952      	ldr	r2, [r2, #20]
 800265c:	0852      	lsrs	r2, r2, #1
 800265e:	3a01      	subs	r2, #1
 8002660:	0652      	lsls	r2, r2, #25
 8002662:	430a      	orrs	r2, r1
 8002664:	4915      	ldr	r1, [pc, #84]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002666:	4313      	orrs	r3, r2
 8002668:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800266a:	4b14      	ldr	r3, [pc, #80]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a13      	ldr	r2, [pc, #76]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002670:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002674:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002676:	f7fe fb69 	bl	8000d4c <HAL_GetTick>
 800267a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800267c:	e009      	b.n	8002692 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800267e:	f7fe fb65 	bl	8000d4c <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d902      	bls.n	8002692 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	73fb      	strb	r3, [r7, #15]
          break;
 8002690:	e005      	b.n	800269e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002692:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0ef      	beq.n	800267e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d106      	bne.n	80026b2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	4903      	ldr	r1, [pc, #12]	; (80026bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000

080026c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e095      	b.n	80027fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d108      	bne.n	80026ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026e2:	d009      	beq.n	80026f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	61da      	str	r2, [r3, #28]
 80026ea:	e005      	b.n	80026f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe f970 	bl	80009f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800272e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002738:	d902      	bls.n	8002740 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	e002      	b.n	8002746 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002744:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800274e:	d007      	beq.n	8002760 <HAL_SPI_Init+0xa0>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002758:	d002      	beq.n	8002760 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a2:	ea42 0103 	orr.w	r1, r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	0c1b      	lsrs	r3, r3, #16
 80027bc:	f003 0204 	and.w	r2, r3, #4
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80027dc:	ea42 0103 	orr.w	r1, r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b088      	sub	sp, #32
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	603b      	str	r3, [r7, #0]
 8002812:	4613      	mov	r3, r2
 8002814:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_SPI_Transmit+0x22>
 8002824:	2302      	movs	r3, #2
 8002826:	e158      	b.n	8002ada <HAL_SPI_Transmit+0x2d4>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002830:	f7fe fa8c 	bl	8000d4c <HAL_GetTick>
 8002834:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b01      	cmp	r3, #1
 8002844:	d002      	beq.n	800284c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002846:	2302      	movs	r3, #2
 8002848:	77fb      	strb	r3, [r7, #31]
    goto error;
 800284a:	e13d      	b.n	8002ac8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <HAL_SPI_Transmit+0x52>
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d102      	bne.n	800285e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800285c:	e134      	b.n	8002ac8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2203      	movs	r2, #3
 8002862:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	88fa      	ldrh	r2, [r7, #6]
 8002876:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	88fa      	ldrh	r2, [r7, #6]
 800287c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028a8:	d10f      	bne.n	80028ca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d4:	2b40      	cmp	r3, #64	; 0x40
 80028d6:	d007      	beq.n	80028e8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028f0:	d94b      	bls.n	800298a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <HAL_SPI_Transmit+0xfa>
 80028fa:	8afb      	ldrh	r3, [r7, #22]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d13e      	bne.n	800297e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002904:	881a      	ldrh	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	1c9a      	adds	r2, r3, #2
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800291a:	b29b      	uxth	r3, r3
 800291c:	3b01      	subs	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002924:	e02b      	b.n	800297e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b02      	cmp	r3, #2
 8002932:	d112      	bne.n	800295a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002938:	881a      	ldrh	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002944:	1c9a      	adds	r2, r3, #2
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002958:	e011      	b.n	800297e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800295a:	f7fe f9f7 	bl	8000d4c <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d803      	bhi.n	8002972 <HAL_SPI_Transmit+0x16c>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d102      	bne.n	8002978 <HAL_SPI_Transmit+0x172>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d102      	bne.n	800297e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800297c:	e0a4      	b.n	8002ac8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002982:	b29b      	uxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1ce      	bne.n	8002926 <HAL_SPI_Transmit+0x120>
 8002988:	e07c      	b.n	8002a84 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <HAL_SPI_Transmit+0x192>
 8002992:	8afb      	ldrh	r3, [r7, #22]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d170      	bne.n	8002a7a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800299c:	b29b      	uxth	r3, r3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d912      	bls.n	80029c8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	881a      	ldrh	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b2:	1c9a      	adds	r2, r3, #2
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029bc:	b29b      	uxth	r3, r3
 80029be:	3b02      	subs	r3, #2
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029c6:	e058      	b.n	8002a7a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	330c      	adds	r3, #12
 80029d2:	7812      	ldrb	r2, [r2, #0]
 80029d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80029ee:	e044      	b.n	8002a7a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d12b      	bne.n	8002a56 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d912      	bls.n	8002a2e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	881a      	ldrh	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a18:	1c9a      	adds	r2, r3, #2
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3b02      	subs	r3, #2
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a2c:	e025      	b.n	8002a7a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	330c      	adds	r3, #12
 8002a38:	7812      	ldrb	r2, [r2, #0]
 8002a3a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a54:	e011      	b.n	8002a7a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a56:	f7fe f979 	bl	8000d4c <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d803      	bhi.n	8002a6e <HAL_SPI_Transmit+0x268>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d102      	bne.n	8002a74 <HAL_SPI_Transmit+0x26e>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a78:	e026      	b.n	8002ac8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1b5      	bne.n	80029f0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	6839      	ldr	r1, [r7, #0]
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 fce3 	bl	8003454 <SPI_EndRxTxTransaction>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10a      	bne.n	8002ab8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	77fb      	strb	r3, [r7, #31]
 8002ac4:	e000      	b.n	8002ac8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002ac6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002ad8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b088      	sub	sp, #32
 8002ae6:	af02      	add	r7, sp, #8
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	603b      	str	r3, [r7, #0]
 8002aee:	4613      	mov	r3, r2
 8002af0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002afe:	d112      	bne.n	8002b26 <HAL_SPI_Receive+0x44>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10e      	bne.n	8002b26 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b10:	88fa      	ldrh	r2, [r7, #6]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	4613      	mov	r3, r2
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f910 	bl	8002d42 <HAL_SPI_TransmitReceive>
 8002b22:	4603      	mov	r3, r0
 8002b24:	e109      	b.n	8002d3a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_SPI_Receive+0x52>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e102      	b.n	8002d3a <HAL_SPI_Receive+0x258>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b3c:	f7fe f906 	bl	8000d4c <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d002      	beq.n	8002b54 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b52:	e0e9      	b.n	8002d28 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <HAL_SPI_Receive+0x7e>
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d102      	bne.n	8002b66 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b64:	e0e0      	b.n	8002d28 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2204      	movs	r2, #4
 8002b6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	88fa      	ldrh	r2, [r7, #6]
 8002b7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	88fa      	ldrh	r2, [r7, #6]
 8002b86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bb0:	d908      	bls.n	8002bc4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	e007      	b.n	8002bd4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bd2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bdc:	d10f      	bne.n	8002bfe <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002bfc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c08:	2b40      	cmp	r3, #64	; 0x40
 8002c0a:	d007      	beq.n	8002c1c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c1a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c24:	d867      	bhi.n	8002cf6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c26:	e030      	b.n	8002c8a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d117      	bne.n	8002c66 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f103 020c 	add.w	r2, r3, #12
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	7812      	ldrb	r2, [r2, #0]
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002c64:	e011      	b.n	8002c8a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c66:	f7fe f871 	bl	8000d4c <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d803      	bhi.n	8002c7e <HAL_SPI_Receive+0x19c>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7c:	d102      	bne.n	8002c84 <HAL_SPI_Receive+0x1a2>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d102      	bne.n	8002c8a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c88:	e04e      	b.n	8002d28 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1c8      	bne.n	8002c28 <HAL_SPI_Receive+0x146>
 8002c96:	e034      	b.n	8002d02 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d115      	bne.n	8002cd2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	b292      	uxth	r2, r2
 8002cb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	1c9a      	adds	r2, r3, #2
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002cd0:	e011      	b.n	8002cf6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cd2:	f7fe f83b 	bl	8000d4c <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d803      	bhi.n	8002cea <HAL_SPI_Receive+0x208>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce8:	d102      	bne.n	8002cf0 <HAL_SPI_Receive+0x20e>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d102      	bne.n	8002cf6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002cf4:	e018      	b.n	8002d28 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1ca      	bne.n	8002c98 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	6839      	ldr	r1, [r7, #0]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fb4c 	bl	80033a4 <SPI_EndRxTransaction>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2220      	movs	r2, #32
 8002d16:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	75fb      	strb	r3, [r7, #23]
 8002d24:	e000      	b.n	8002d28 <HAL_SPI_Receive+0x246>
  }

error :
 8002d26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b08a      	sub	sp, #40	; 0x28
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d50:	2301      	movs	r3, #1
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_SPI_TransmitReceive+0x26>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e1fb      	b.n	8003160 <HAL_SPI_TransmitReceive+0x41e>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d70:	f7fd ffec 	bl	8000d4c <HAL_GetTick>
 8002d74:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d7c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002d84:	887b      	ldrh	r3, [r7, #2]
 8002d86:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002d88:	887b      	ldrh	r3, [r7, #2]
 8002d8a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d8c:	7efb      	ldrb	r3, [r7, #27]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d00e      	beq.n	8002db0 <HAL_SPI_TransmitReceive+0x6e>
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d98:	d106      	bne.n	8002da8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d102      	bne.n	8002da8 <HAL_SPI_TransmitReceive+0x66>
 8002da2:	7efb      	ldrb	r3, [r7, #27]
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d003      	beq.n	8002db0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
 8002daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002dae:	e1cd      	b.n	800314c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <HAL_SPI_TransmitReceive+0x80>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <HAL_SPI_TransmitReceive+0x80>
 8002dbc:	887b      	ldrh	r3, [r7, #2]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d103      	bne.n	8002dca <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002dc8:	e1c0      	b.n	800314c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d003      	beq.n	8002dde <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2205      	movs	r2, #5
 8002dda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	887a      	ldrh	r2, [r7, #2]
 8002dee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	887a      	ldrh	r2, [r7, #2]
 8002df6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	887a      	ldrh	r2, [r7, #2]
 8002e04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	887a      	ldrh	r2, [r7, #2]
 8002e0a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e20:	d802      	bhi.n	8002e28 <HAL_SPI_TransmitReceive+0xe6>
 8002e22:	8a3b      	ldrh	r3, [r7, #16]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d908      	bls.n	8002e3a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	e007      	b.n	8002e4a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e48:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e54:	2b40      	cmp	r3, #64	; 0x40
 8002e56:	d007      	beq.n	8002e68 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e70:	d97c      	bls.n	8002f6c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <HAL_SPI_TransmitReceive+0x13e>
 8002e7a:	8a7b      	ldrh	r3, [r7, #18]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d169      	bne.n	8002f54 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	881a      	ldrh	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	1c9a      	adds	r2, r3, #2
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ea4:	e056      	b.n	8002f54 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d11b      	bne.n	8002eec <HAL_SPI_TransmitReceive+0x1aa>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d016      	beq.n	8002eec <HAL_SPI_TransmitReceive+0x1aa>
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d113      	bne.n	8002eec <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec8:	881a      	ldrh	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	1c9a      	adds	r2, r3, #2
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d11c      	bne.n	8002f34 <HAL_SPI_TransmitReceive+0x1f2>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d016      	beq.n	8002f34 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	b292      	uxth	r2, r2
 8002f12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	1c9a      	adds	r2, r3, #2
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f30:	2301      	movs	r3, #1
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f34:	f7fd ff0a 	bl	8000d4c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d807      	bhi.n	8002f54 <HAL_SPI_TransmitReceive+0x212>
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4a:	d003      	beq.n	8002f54 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002f52:	e0fb      	b.n	800314c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1a3      	bne.n	8002ea6 <HAL_SPI_TransmitReceive+0x164>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d19d      	bne.n	8002ea6 <HAL_SPI_TransmitReceive+0x164>
 8002f6a:	e0df      	b.n	800312c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_SPI_TransmitReceive+0x23a>
 8002f74:	8a7b      	ldrh	r3, [r7, #18]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	f040 80cb 	bne.w	8003112 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d912      	bls.n	8002fac <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	881a      	ldrh	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	1c9a      	adds	r2, r3, #2
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	3b02      	subs	r3, #2
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002faa:	e0b2      	b.n	8003112 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	330c      	adds	r3, #12
 8002fb6:	7812      	ldrb	r2, [r2, #0]
 8002fb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fd2:	e09e      	b.n	8003112 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d134      	bne.n	800304c <HAL_SPI_TransmitReceive+0x30a>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d02f      	beq.n	800304c <HAL_SPI_TransmitReceive+0x30a>
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d12c      	bne.n	800304c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d912      	bls.n	8003022 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	881a      	ldrh	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300c:	1c9a      	adds	r2, r3, #2
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b02      	subs	r3, #2
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003020:	e012      	b.n	8003048 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	330c      	adds	r3, #12
 800302c:	7812      	ldrb	r2, [r2, #0]
 800302e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d148      	bne.n	80030ec <HAL_SPI_TransmitReceive+0x3aa>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d042      	beq.n	80030ec <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d923      	bls.n	80030ba <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	b292      	uxth	r2, r2
 800307e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	1c9a      	adds	r2, r3, #2
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b02      	subs	r3, #2
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d81f      	bhi.n	80030e8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030b6:	605a      	str	r2, [r3, #4]
 80030b8:	e016      	b.n	80030e8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f103 020c 	add.w	r2, r3, #12
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	7812      	ldrb	r2, [r2, #0]
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030e8:	2301      	movs	r3, #1
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030ec:	f7fd fe2e 	bl	8000d4c <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d803      	bhi.n	8003104 <HAL_SPI_TransmitReceive+0x3c2>
 80030fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003102:	d102      	bne.n	800310a <HAL_SPI_TransmitReceive+0x3c8>
 8003104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003106:	2b00      	cmp	r3, #0
 8003108:	d103      	bne.n	8003112 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003110:	e01c      	b.n	800314c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	f47f af5b 	bne.w	8002fd4 <HAL_SPI_TransmitReceive+0x292>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	f47f af54 	bne.w	8002fd4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800312c:	69fa      	ldr	r2, [r7, #28]
 800312e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f98f 	bl	8003454 <SPI_EndRxTxTransaction>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d006      	beq.n	800314a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	661a      	str	r2, [r3, #96]	; 0x60
 8003148:	e000      	b.n	800314c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800314a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800315c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003160:	4618      	mov	r0, r3
 8003162:	3728      	adds	r7, #40	; 0x28
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	4613      	mov	r3, r2
 8003176:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003178:	f7fd fde8 	bl	8000d4c <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	4413      	add	r3, r2
 8003186:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003188:	f7fd fde0 	bl	8000d4c <HAL_GetTick>
 800318c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800318e:	4b39      	ldr	r3, [pc, #228]	; (8003274 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	015b      	lsls	r3, r3, #5
 8003194:	0d1b      	lsrs	r3, r3, #20
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	fb02 f303 	mul.w	r3, r2, r3
 800319c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800319e:	e054      	b.n	800324a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a6:	d050      	beq.n	800324a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031a8:	f7fd fdd0 	bl	8000d4c <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d902      	bls.n	80031be <SPI_WaitFlagStateUntilTimeout+0x56>
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d13d      	bne.n	800323a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031d6:	d111      	bne.n	80031fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e0:	d004      	beq.n	80031ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ea:	d107      	bne.n	80031fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003204:	d10f      	bne.n	8003226 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003224:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e017      	b.n	800326a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	3b01      	subs	r3, #1
 8003248:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4013      	ands	r3, r2
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	429a      	cmp	r2, r3
 8003258:	bf0c      	ite	eq
 800325a:	2301      	moveq	r3, #1
 800325c:	2300      	movne	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	429a      	cmp	r2, r3
 8003266:	d19b      	bne.n	80031a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3720      	adds	r7, #32
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000000 	.word	0x20000000

08003278 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08a      	sub	sp, #40	; 0x28
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800328a:	f7fd fd5f 	bl	8000d4c <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	4413      	add	r3, r2
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800329a:	f7fd fd57 	bl	8000d4c <HAL_GetTick>
 800329e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	330c      	adds	r3, #12
 80032a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032a8:	4b3d      	ldr	r3, [pc, #244]	; (80033a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	00da      	lsls	r2, r3, #3
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	0d1b      	lsrs	r3, r3, #20
 80032b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ba:	fb02 f303 	mul.w	r3, r2, r3
 80032be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80032c0:	e060      	b.n	8003384 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80032c8:	d107      	bne.n	80032da <SPI_WaitFifoStateUntilTimeout+0x62>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d104      	bne.n	80032da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80032d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e0:	d050      	beq.n	8003384 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032e2:	f7fd fd33 	bl	8000d4c <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d902      	bls.n	80032f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d13d      	bne.n	8003374 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003306:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003310:	d111      	bne.n	8003336 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800331a:	d004      	beq.n	8003326 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003324:	d107      	bne.n	8003336 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003334:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800333e:	d10f      	bne.n	8003360 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800335e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e010      	b.n	8003396 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	3b01      	subs	r3, #1
 8003382:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	4013      	ands	r3, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	429a      	cmp	r2, r3
 8003392:	d196      	bne.n	80032c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3728      	adds	r7, #40	; 0x28
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000000 	.word	0x20000000

080033a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033b8:	d111      	bne.n	80033de <SPI_EndRxTransaction+0x3a>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033c2:	d004      	beq.n	80033ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033cc:	d107      	bne.n	80033de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033dc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2200      	movs	r2, #0
 80033e6:	2180      	movs	r1, #128	; 0x80
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f7ff febd 	bl	8003168 <SPI_WaitFlagStateUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d007      	beq.n	8003404 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f8:	f043 0220 	orr.w	r2, r3, #32
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e023      	b.n	800344c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800340c:	d11d      	bne.n	800344a <SPI_EndRxTransaction+0xa6>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003416:	d004      	beq.n	8003422 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003420:	d113      	bne.n	800344a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2200      	movs	r2, #0
 800342a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7ff ff22 	bl	8003278 <SPI_WaitFifoStateUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343e:	f043 0220 	orr.w	r2, r3, #32
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e000      	b.n	800344c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2200      	movs	r2, #0
 8003468:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f7ff ff03 	bl	8003278 <SPI_WaitFifoStateUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d007      	beq.n	8003488 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800347c:	f043 0220 	orr.w	r2, r3, #32
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e027      	b.n	80034d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2200      	movs	r2, #0
 8003490:	2180      	movs	r1, #128	; 0x80
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f7ff fe68 	bl	8003168 <SPI_WaitFlagStateUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d007      	beq.n	80034ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a2:	f043 0220 	orr.w	r2, r3, #32
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e014      	b.n	80034d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f7ff fedc 	bl	8003278 <SPI_WaitFifoStateUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ca:	f043 0220 	orr.w	r2, r3, #32
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e000      	b.n	80034d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e040      	b.n	8003574 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fd faba 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2224      	movs	r2, #36	; 0x24
 800350c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0201 	bic.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f8c0 	bl	80036a4 <UART_SetConfig>
 8003524:	4603      	mov	r3, r0
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e022      	b.n	8003574 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fb3a 	bl	8003bb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800354a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800355a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fbc1 	bl	8003cf4 <UART_CheckIdleState>
 8003572:	4603      	mov	r3, r0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	; 0x28
 8003580:	af02      	add	r7, sp, #8
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	603b      	str	r3, [r7, #0]
 8003588:	4613      	mov	r3, r2
 800358a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003590:	2b20      	cmp	r3, #32
 8003592:	f040 8082 	bne.w	800369a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <HAL_UART_Transmit+0x26>
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e07a      	b.n	800369c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_UART_Transmit+0x38>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e073      	b.n	800369c <HAL_UART_Transmit+0x120>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2221      	movs	r2, #33	; 0x21
 80035c8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ca:	f7fd fbbf 	bl	8000d4c <HAL_GetTick>
 80035ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	88fa      	ldrh	r2, [r7, #6]
 80035d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	88fa      	ldrh	r2, [r7, #6]
 80035dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e8:	d108      	bne.n	80035fc <HAL_UART_Transmit+0x80>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d104      	bne.n	80035fc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	e003      	b.n	8003604 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003600:	2300      	movs	r3, #0
 8003602:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800360c:	e02d      	b.n	800366a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2200      	movs	r2, #0
 8003616:	2180      	movs	r1, #128	; 0x80
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 fbb4 	bl	8003d86 <UART_WaitOnFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e039      	b.n	800369c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10b      	bne.n	8003646 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	881a      	ldrh	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800363a:	b292      	uxth	r2, r2
 800363c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	3302      	adds	r3, #2
 8003642:	61bb      	str	r3, [r7, #24]
 8003644:	e008      	b.n	8003658 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	781a      	ldrb	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	b292      	uxth	r2, r2
 8003650:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	3301      	adds	r3, #1
 8003656:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1cb      	bne.n	800360e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2200      	movs	r2, #0
 800367e:	2140      	movs	r1, #64	; 0x40
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 fb80 	bl	8003d86 <UART_WaitOnFlagUntilTimeout>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e005      	b.n	800369c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	e000      	b.n	800369c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800369a:	2302      	movs	r3, #2
  }
}
 800369c:	4618      	mov	r0, r3
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a8:	b08a      	sub	sp, #40	; 0x28
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	431a      	orrs	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	4ba5      	ldr	r3, [pc, #660]	; (8003968 <UART_SetConfig+0x2c4>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036dc:	430b      	orrs	r3, r1
 80036de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a9a      	ldr	r2, [pc, #616]	; (800396c <UART_SetConfig+0x2c8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d004      	beq.n	8003710 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370c:	4313      	orrs	r3, r2
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003720:	430a      	orrs	r2, r1
 8003722:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a91      	ldr	r2, [pc, #580]	; (8003970 <UART_SetConfig+0x2cc>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d126      	bne.n	800377c <UART_SetConfig+0xd8>
 800372e:	4b91      	ldr	r3, [pc, #580]	; (8003974 <UART_SetConfig+0x2d0>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	2b03      	cmp	r3, #3
 800373a:	d81b      	bhi.n	8003774 <UART_SetConfig+0xd0>
 800373c:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <UART_SetConfig+0xa0>)
 800373e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003742:	bf00      	nop
 8003744:	08003755 	.word	0x08003755
 8003748:	08003765 	.word	0x08003765
 800374c:	0800375d 	.word	0x0800375d
 8003750:	0800376d 	.word	0x0800376d
 8003754:	2301      	movs	r3, #1
 8003756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800375a:	e0d6      	b.n	800390a <UART_SetConfig+0x266>
 800375c:	2302      	movs	r3, #2
 800375e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003762:	e0d2      	b.n	800390a <UART_SetConfig+0x266>
 8003764:	2304      	movs	r3, #4
 8003766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800376a:	e0ce      	b.n	800390a <UART_SetConfig+0x266>
 800376c:	2308      	movs	r3, #8
 800376e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003772:	e0ca      	b.n	800390a <UART_SetConfig+0x266>
 8003774:	2310      	movs	r3, #16
 8003776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800377a:	e0c6      	b.n	800390a <UART_SetConfig+0x266>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a7d      	ldr	r2, [pc, #500]	; (8003978 <UART_SetConfig+0x2d4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d138      	bne.n	80037f8 <UART_SetConfig+0x154>
 8003786:	4b7b      	ldr	r3, [pc, #492]	; (8003974 <UART_SetConfig+0x2d0>)
 8003788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b0c      	cmp	r3, #12
 8003792:	d82d      	bhi.n	80037f0 <UART_SetConfig+0x14c>
 8003794:	a201      	add	r2, pc, #4	; (adr r2, 800379c <UART_SetConfig+0xf8>)
 8003796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379a:	bf00      	nop
 800379c:	080037d1 	.word	0x080037d1
 80037a0:	080037f1 	.word	0x080037f1
 80037a4:	080037f1 	.word	0x080037f1
 80037a8:	080037f1 	.word	0x080037f1
 80037ac:	080037e1 	.word	0x080037e1
 80037b0:	080037f1 	.word	0x080037f1
 80037b4:	080037f1 	.word	0x080037f1
 80037b8:	080037f1 	.word	0x080037f1
 80037bc:	080037d9 	.word	0x080037d9
 80037c0:	080037f1 	.word	0x080037f1
 80037c4:	080037f1 	.word	0x080037f1
 80037c8:	080037f1 	.word	0x080037f1
 80037cc:	080037e9 	.word	0x080037e9
 80037d0:	2300      	movs	r3, #0
 80037d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d6:	e098      	b.n	800390a <UART_SetConfig+0x266>
 80037d8:	2302      	movs	r3, #2
 80037da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037de:	e094      	b.n	800390a <UART_SetConfig+0x266>
 80037e0:	2304      	movs	r3, #4
 80037e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e6:	e090      	b.n	800390a <UART_SetConfig+0x266>
 80037e8:	2308      	movs	r3, #8
 80037ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ee:	e08c      	b.n	800390a <UART_SetConfig+0x266>
 80037f0:	2310      	movs	r3, #16
 80037f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f6:	e088      	b.n	800390a <UART_SetConfig+0x266>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a5f      	ldr	r2, [pc, #380]	; (800397c <UART_SetConfig+0x2d8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d125      	bne.n	800384e <UART_SetConfig+0x1aa>
 8003802:	4b5c      	ldr	r3, [pc, #368]	; (8003974 <UART_SetConfig+0x2d0>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800380c:	2b30      	cmp	r3, #48	; 0x30
 800380e:	d016      	beq.n	800383e <UART_SetConfig+0x19a>
 8003810:	2b30      	cmp	r3, #48	; 0x30
 8003812:	d818      	bhi.n	8003846 <UART_SetConfig+0x1a2>
 8003814:	2b20      	cmp	r3, #32
 8003816:	d00a      	beq.n	800382e <UART_SetConfig+0x18a>
 8003818:	2b20      	cmp	r3, #32
 800381a:	d814      	bhi.n	8003846 <UART_SetConfig+0x1a2>
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <UART_SetConfig+0x182>
 8003820:	2b10      	cmp	r3, #16
 8003822:	d008      	beq.n	8003836 <UART_SetConfig+0x192>
 8003824:	e00f      	b.n	8003846 <UART_SetConfig+0x1a2>
 8003826:	2300      	movs	r3, #0
 8003828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800382c:	e06d      	b.n	800390a <UART_SetConfig+0x266>
 800382e:	2302      	movs	r3, #2
 8003830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003834:	e069      	b.n	800390a <UART_SetConfig+0x266>
 8003836:	2304      	movs	r3, #4
 8003838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800383c:	e065      	b.n	800390a <UART_SetConfig+0x266>
 800383e:	2308      	movs	r3, #8
 8003840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003844:	e061      	b.n	800390a <UART_SetConfig+0x266>
 8003846:	2310      	movs	r3, #16
 8003848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384c:	e05d      	b.n	800390a <UART_SetConfig+0x266>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a4b      	ldr	r2, [pc, #300]	; (8003980 <UART_SetConfig+0x2dc>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d125      	bne.n	80038a4 <UART_SetConfig+0x200>
 8003858:	4b46      	ldr	r3, [pc, #280]	; (8003974 <UART_SetConfig+0x2d0>)
 800385a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003862:	2bc0      	cmp	r3, #192	; 0xc0
 8003864:	d016      	beq.n	8003894 <UART_SetConfig+0x1f0>
 8003866:	2bc0      	cmp	r3, #192	; 0xc0
 8003868:	d818      	bhi.n	800389c <UART_SetConfig+0x1f8>
 800386a:	2b80      	cmp	r3, #128	; 0x80
 800386c:	d00a      	beq.n	8003884 <UART_SetConfig+0x1e0>
 800386e:	2b80      	cmp	r3, #128	; 0x80
 8003870:	d814      	bhi.n	800389c <UART_SetConfig+0x1f8>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <UART_SetConfig+0x1d8>
 8003876:	2b40      	cmp	r3, #64	; 0x40
 8003878:	d008      	beq.n	800388c <UART_SetConfig+0x1e8>
 800387a:	e00f      	b.n	800389c <UART_SetConfig+0x1f8>
 800387c:	2300      	movs	r3, #0
 800387e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003882:	e042      	b.n	800390a <UART_SetConfig+0x266>
 8003884:	2302      	movs	r3, #2
 8003886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800388a:	e03e      	b.n	800390a <UART_SetConfig+0x266>
 800388c:	2304      	movs	r3, #4
 800388e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003892:	e03a      	b.n	800390a <UART_SetConfig+0x266>
 8003894:	2308      	movs	r3, #8
 8003896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800389a:	e036      	b.n	800390a <UART_SetConfig+0x266>
 800389c:	2310      	movs	r3, #16
 800389e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a2:	e032      	b.n	800390a <UART_SetConfig+0x266>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a30      	ldr	r2, [pc, #192]	; (800396c <UART_SetConfig+0x2c8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d12a      	bne.n	8003904 <UART_SetConfig+0x260>
 80038ae:	4b31      	ldr	r3, [pc, #196]	; (8003974 <UART_SetConfig+0x2d0>)
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038bc:	d01a      	beq.n	80038f4 <UART_SetConfig+0x250>
 80038be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038c2:	d81b      	bhi.n	80038fc <UART_SetConfig+0x258>
 80038c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c8:	d00c      	beq.n	80038e4 <UART_SetConfig+0x240>
 80038ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ce:	d815      	bhi.n	80038fc <UART_SetConfig+0x258>
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <UART_SetConfig+0x238>
 80038d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d8:	d008      	beq.n	80038ec <UART_SetConfig+0x248>
 80038da:	e00f      	b.n	80038fc <UART_SetConfig+0x258>
 80038dc:	2300      	movs	r3, #0
 80038de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038e2:	e012      	b.n	800390a <UART_SetConfig+0x266>
 80038e4:	2302      	movs	r3, #2
 80038e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ea:	e00e      	b.n	800390a <UART_SetConfig+0x266>
 80038ec:	2304      	movs	r3, #4
 80038ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f2:	e00a      	b.n	800390a <UART_SetConfig+0x266>
 80038f4:	2308      	movs	r3, #8
 80038f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fa:	e006      	b.n	800390a <UART_SetConfig+0x266>
 80038fc:	2310      	movs	r3, #16
 80038fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003902:	e002      	b.n	800390a <UART_SetConfig+0x266>
 8003904:	2310      	movs	r3, #16
 8003906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a17      	ldr	r2, [pc, #92]	; (800396c <UART_SetConfig+0x2c8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	f040 808b 	bne.w	8003a2c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003916:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800391a:	2b08      	cmp	r3, #8
 800391c:	d834      	bhi.n	8003988 <UART_SetConfig+0x2e4>
 800391e:	a201      	add	r2, pc, #4	; (adr r2, 8003924 <UART_SetConfig+0x280>)
 8003920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003924:	08003949 	.word	0x08003949
 8003928:	08003989 	.word	0x08003989
 800392c:	08003951 	.word	0x08003951
 8003930:	08003989 	.word	0x08003989
 8003934:	08003957 	.word	0x08003957
 8003938:	08003989 	.word	0x08003989
 800393c:	08003989 	.word	0x08003989
 8003940:	08003989 	.word	0x08003989
 8003944:	0800395f 	.word	0x0800395f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003948:	f7fe fad0 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 800394c:	61f8      	str	r0, [r7, #28]
        break;
 800394e:	e021      	b.n	8003994 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003950:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <UART_SetConfig+0x2e0>)
 8003952:	61fb      	str	r3, [r7, #28]
        break;
 8003954:	e01e      	b.n	8003994 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003956:	f7fe fa31 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 800395a:	61f8      	str	r0, [r7, #28]
        break;
 800395c:	e01a      	b.n	8003994 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800395e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003962:	61fb      	str	r3, [r7, #28]
        break;
 8003964:	e016      	b.n	8003994 <UART_SetConfig+0x2f0>
 8003966:	bf00      	nop
 8003968:	efff69f3 	.word	0xefff69f3
 800396c:	40008000 	.word	0x40008000
 8003970:	40013800 	.word	0x40013800
 8003974:	40021000 	.word	0x40021000
 8003978:	40004400 	.word	0x40004400
 800397c:	40004800 	.word	0x40004800
 8003980:	40004c00 	.word	0x40004c00
 8003984:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003992:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 80fa 	beq.w	8003b90 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	4413      	add	r3, r2
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d305      	bcc.n	80039b8 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d903      	bls.n	80039c0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039be:	e0e7      	b.n	8003b90 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	2200      	movs	r2, #0
 80039c4:	461c      	mov	r4, r3
 80039c6:	4615      	mov	r5, r2
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	022b      	lsls	r3, r5, #8
 80039d2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80039d6:	0222      	lsls	r2, r4, #8
 80039d8:	68f9      	ldr	r1, [r7, #12]
 80039da:	6849      	ldr	r1, [r1, #4]
 80039dc:	0849      	lsrs	r1, r1, #1
 80039de:	2000      	movs	r0, #0
 80039e0:	4688      	mov	r8, r1
 80039e2:	4681      	mov	r9, r0
 80039e4:	eb12 0a08 	adds.w	sl, r2, r8
 80039e8:	eb43 0b09 	adc.w	fp, r3, r9
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039fa:	4650      	mov	r0, sl
 80039fc:	4659      	mov	r1, fp
 80039fe:	f7fc fc3f 	bl	8000280 <__aeabi_uldivmod>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4613      	mov	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a10:	d308      	bcc.n	8003a24 <UART_SetConfig+0x380>
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a18:	d204      	bcs.n	8003a24 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	60da      	str	r2, [r3, #12]
 8003a22:	e0b5      	b.n	8003b90 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a2a:	e0b1      	b.n	8003b90 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a34:	d15d      	bne.n	8003af2 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8003a36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d827      	bhi.n	8003a8e <UART_SetConfig+0x3ea>
 8003a3e:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <UART_SetConfig+0x3a0>)
 8003a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a44:	08003a69 	.word	0x08003a69
 8003a48:	08003a71 	.word	0x08003a71
 8003a4c:	08003a79 	.word	0x08003a79
 8003a50:	08003a8f 	.word	0x08003a8f
 8003a54:	08003a7f 	.word	0x08003a7f
 8003a58:	08003a8f 	.word	0x08003a8f
 8003a5c:	08003a8f 	.word	0x08003a8f
 8003a60:	08003a8f 	.word	0x08003a8f
 8003a64:	08003a87 	.word	0x08003a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a68:	f7fe fa40 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8003a6c:	61f8      	str	r0, [r7, #28]
        break;
 8003a6e:	e014      	b.n	8003a9a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a70:	f7fe fa52 	bl	8001f18 <HAL_RCC_GetPCLK2Freq>
 8003a74:	61f8      	str	r0, [r7, #28]
        break;
 8003a76:	e010      	b.n	8003a9a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a78:	4b4c      	ldr	r3, [pc, #304]	; (8003bac <UART_SetConfig+0x508>)
 8003a7a:	61fb      	str	r3, [r7, #28]
        break;
 8003a7c:	e00d      	b.n	8003a9a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a7e:	f7fe f99d 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8003a82:	61f8      	str	r0, [r7, #28]
        break;
 8003a84:	e009      	b.n	8003a9a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a8a:	61fb      	str	r3, [r7, #28]
        break;
 8003a8c:	e005      	b.n	8003a9a <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d077      	beq.n	8003b90 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	005a      	lsls	r2, r3, #1
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	085b      	lsrs	r3, r3, #1
 8003aaa:	441a      	add	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2b0f      	cmp	r3, #15
 8003aba:	d916      	bls.n	8003aea <UART_SetConfig+0x446>
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac2:	d212      	bcs.n	8003aea <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	f023 030f 	bic.w	r3, r3, #15
 8003acc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	085b      	lsrs	r3, r3, #1
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	8afb      	ldrh	r3, [r7, #22]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	8afa      	ldrh	r2, [r7, #22]
 8003ae6:	60da      	str	r2, [r3, #12]
 8003ae8:	e052      	b.n	8003b90 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003af0:	e04e      	b.n	8003b90 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003af2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d827      	bhi.n	8003b4a <UART_SetConfig+0x4a6>
 8003afa:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <UART_SetConfig+0x45c>)
 8003afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b00:	08003b25 	.word	0x08003b25
 8003b04:	08003b2d 	.word	0x08003b2d
 8003b08:	08003b35 	.word	0x08003b35
 8003b0c:	08003b4b 	.word	0x08003b4b
 8003b10:	08003b3b 	.word	0x08003b3b
 8003b14:	08003b4b 	.word	0x08003b4b
 8003b18:	08003b4b 	.word	0x08003b4b
 8003b1c:	08003b4b 	.word	0x08003b4b
 8003b20:	08003b43 	.word	0x08003b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b24:	f7fe f9e2 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8003b28:	61f8      	str	r0, [r7, #28]
        break;
 8003b2a:	e014      	b.n	8003b56 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b2c:	f7fe f9f4 	bl	8001f18 <HAL_RCC_GetPCLK2Freq>
 8003b30:	61f8      	str	r0, [r7, #28]
        break;
 8003b32:	e010      	b.n	8003b56 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b34:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <UART_SetConfig+0x508>)
 8003b36:	61fb      	str	r3, [r7, #28]
        break;
 8003b38:	e00d      	b.n	8003b56 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b3a:	f7fe f93f 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8003b3e:	61f8      	str	r0, [r7, #28]
        break;
 8003b40:	e009      	b.n	8003b56 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b46:	61fb      	str	r3, [r7, #28]
        break;
 8003b48:	e005      	b.n	8003b56 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b54:	bf00      	nop
    }

    if (pclk != 0U)
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d019      	beq.n	8003b90 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	085a      	lsrs	r2, r3, #1
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	441a      	add	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	2b0f      	cmp	r3, #15
 8003b74:	d909      	bls.n	8003b8a <UART_SetConfig+0x4e6>
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b7c:	d205      	bcs.n	8003b8a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60da      	str	r2, [r3, #12]
 8003b88:	e002      	b.n	8003b90 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3728      	adds	r7, #40	; 0x28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003baa:	bf00      	nop
 8003bac:	00f42400 	.word	0x00f42400

08003bb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00a      	beq.n	8003bda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01a      	beq.n	8003cc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cae:	d10a      	bne.n	8003cc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	605a      	str	r2, [r3, #4]
  }
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af02      	add	r7, sp, #8
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d04:	f7fd f822 	bl	8000d4c <HAL_GetTick>
 8003d08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d10e      	bne.n	8003d36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f82d 	bl	8003d86 <UART_WaitOnFlagUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e023      	b.n	8003d7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d10e      	bne.n	8003d62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f817 	bl	8003d86 <UART_WaitOnFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e00d      	b.n	8003d7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b09c      	sub	sp, #112	; 0x70
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	603b      	str	r3, [r7, #0]
 8003d92:	4613      	mov	r3, r2
 8003d94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d96:	e0a5      	b.n	8003ee4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9e:	f000 80a1 	beq.w	8003ee4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da2:	f7fc ffd3 	bl	8000d4c <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d302      	bcc.n	8003db8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003db2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d13e      	bne.n	8003e36 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dcc:	667b      	str	r3, [r7, #100]	; 0x64
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dd8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ddc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e6      	bne.n	8003db8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3308      	adds	r3, #8
 8003df0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df4:	e853 3f00 	ldrex	r3, [r3]
 8003df8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	663b      	str	r3, [r7, #96]	; 0x60
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3308      	adds	r3, #8
 8003e08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e12:	e841 2300 	strex	r3, r2, [r1]
 8003e16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e5      	bne.n	8003dea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2220      	movs	r2, #32
 8003e22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2220      	movs	r2, #32
 8003e28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e067      	b.n	8003f06 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d04f      	beq.n	8003ee4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e52:	d147      	bne.n	8003ee4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e5c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e84:	e841 2300 	strex	r3, r2, [r1]
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e6      	bne.n	8003e5e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3308      	adds	r3, #8
 8003e96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
 8003e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3308      	adds	r3, #8
 8003eae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003eb0:	623a      	str	r2, [r7, #32]
 8003eb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	69f9      	ldr	r1, [r7, #28]
 8003eb6:	6a3a      	ldr	r2, [r7, #32]
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e5      	bne.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e010      	b.n	8003f06 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69da      	ldr	r2, [r3, #28]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	4013      	ands	r3, r2
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	f43f af4a 	beq.w	8003d98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3770      	adds	r7, #112	; 0x70
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <__errno>:
 8003f10:	4b01      	ldr	r3, [pc, #4]	; (8003f18 <__errno+0x8>)
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	2000000c 	.word	0x2000000c

08003f1c <__libc_init_array>:
 8003f1c:	b570      	push	{r4, r5, r6, lr}
 8003f1e:	4d0d      	ldr	r5, [pc, #52]	; (8003f54 <__libc_init_array+0x38>)
 8003f20:	4c0d      	ldr	r4, [pc, #52]	; (8003f58 <__libc_init_array+0x3c>)
 8003f22:	1b64      	subs	r4, r4, r5
 8003f24:	10a4      	asrs	r4, r4, #2
 8003f26:	2600      	movs	r6, #0
 8003f28:	42a6      	cmp	r6, r4
 8003f2a:	d109      	bne.n	8003f40 <__libc_init_array+0x24>
 8003f2c:	4d0b      	ldr	r5, [pc, #44]	; (8003f5c <__libc_init_array+0x40>)
 8003f2e:	4c0c      	ldr	r4, [pc, #48]	; (8003f60 <__libc_init_array+0x44>)
 8003f30:	f000 fc8e 	bl	8004850 <_init>
 8003f34:	1b64      	subs	r4, r4, r5
 8003f36:	10a4      	asrs	r4, r4, #2
 8003f38:	2600      	movs	r6, #0
 8003f3a:	42a6      	cmp	r6, r4
 8003f3c:	d105      	bne.n	8003f4a <__libc_init_array+0x2e>
 8003f3e:	bd70      	pop	{r4, r5, r6, pc}
 8003f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f44:	4798      	blx	r3
 8003f46:	3601      	adds	r6, #1
 8003f48:	e7ee      	b.n	8003f28 <__libc_init_array+0xc>
 8003f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f4e:	4798      	blx	r3
 8003f50:	3601      	adds	r6, #1
 8003f52:	e7f2      	b.n	8003f3a <__libc_init_array+0x1e>
 8003f54:	08004978 	.word	0x08004978
 8003f58:	08004978 	.word	0x08004978
 8003f5c:	08004978 	.word	0x08004978
 8003f60:	0800497c 	.word	0x0800497c

08003f64 <memset>:
 8003f64:	4402      	add	r2, r0
 8003f66:	4603      	mov	r3, r0
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d100      	bne.n	8003f6e <memset+0xa>
 8003f6c:	4770      	bx	lr
 8003f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f72:	e7f9      	b.n	8003f68 <memset+0x4>

08003f74 <siprintf>:
 8003f74:	b40e      	push	{r1, r2, r3}
 8003f76:	b500      	push	{lr}
 8003f78:	b09c      	sub	sp, #112	; 0x70
 8003f7a:	ab1d      	add	r3, sp, #116	; 0x74
 8003f7c:	9002      	str	r0, [sp, #8]
 8003f7e:	9006      	str	r0, [sp, #24]
 8003f80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f84:	4809      	ldr	r0, [pc, #36]	; (8003fac <siprintf+0x38>)
 8003f86:	9107      	str	r1, [sp, #28]
 8003f88:	9104      	str	r1, [sp, #16]
 8003f8a:	4909      	ldr	r1, [pc, #36]	; (8003fb0 <siprintf+0x3c>)
 8003f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f90:	9105      	str	r1, [sp, #20]
 8003f92:	6800      	ldr	r0, [r0, #0]
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	a902      	add	r1, sp, #8
 8003f98:	f000 f868 	bl	800406c <_svfiprintf_r>
 8003f9c:	9b02      	ldr	r3, [sp, #8]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	b01c      	add	sp, #112	; 0x70
 8003fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fa8:	b003      	add	sp, #12
 8003faa:	4770      	bx	lr
 8003fac:	2000000c 	.word	0x2000000c
 8003fb0:	ffff0208 	.word	0xffff0208

08003fb4 <__ssputs_r>:
 8003fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb8:	688e      	ldr	r6, [r1, #8]
 8003fba:	429e      	cmp	r6, r3
 8003fbc:	4682      	mov	sl, r0
 8003fbe:	460c      	mov	r4, r1
 8003fc0:	4690      	mov	r8, r2
 8003fc2:	461f      	mov	r7, r3
 8003fc4:	d838      	bhi.n	8004038 <__ssputs_r+0x84>
 8003fc6:	898a      	ldrh	r2, [r1, #12]
 8003fc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003fcc:	d032      	beq.n	8004034 <__ssputs_r+0x80>
 8003fce:	6825      	ldr	r5, [r4, #0]
 8003fd0:	6909      	ldr	r1, [r1, #16]
 8003fd2:	eba5 0901 	sub.w	r9, r5, r1
 8003fd6:	6965      	ldr	r5, [r4, #20]
 8003fd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	444b      	add	r3, r9
 8003fe4:	106d      	asrs	r5, r5, #1
 8003fe6:	429d      	cmp	r5, r3
 8003fe8:	bf38      	it	cc
 8003fea:	461d      	movcc	r5, r3
 8003fec:	0553      	lsls	r3, r2, #21
 8003fee:	d531      	bpl.n	8004054 <__ssputs_r+0xa0>
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	f000 fb63 	bl	80046bc <_malloc_r>
 8003ff6:	4606      	mov	r6, r0
 8003ff8:	b950      	cbnz	r0, 8004010 <__ssputs_r+0x5c>
 8003ffa:	230c      	movs	r3, #12
 8003ffc:	f8ca 3000 	str.w	r3, [sl]
 8004000:	89a3      	ldrh	r3, [r4, #12]
 8004002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004006:	81a3      	strh	r3, [r4, #12]
 8004008:	f04f 30ff 	mov.w	r0, #4294967295
 800400c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004010:	6921      	ldr	r1, [r4, #16]
 8004012:	464a      	mov	r2, r9
 8004014:	f000 fabe 	bl	8004594 <memcpy>
 8004018:	89a3      	ldrh	r3, [r4, #12]
 800401a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800401e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004022:	81a3      	strh	r3, [r4, #12]
 8004024:	6126      	str	r6, [r4, #16]
 8004026:	6165      	str	r5, [r4, #20]
 8004028:	444e      	add	r6, r9
 800402a:	eba5 0509 	sub.w	r5, r5, r9
 800402e:	6026      	str	r6, [r4, #0]
 8004030:	60a5      	str	r5, [r4, #8]
 8004032:	463e      	mov	r6, r7
 8004034:	42be      	cmp	r6, r7
 8004036:	d900      	bls.n	800403a <__ssputs_r+0x86>
 8004038:	463e      	mov	r6, r7
 800403a:	6820      	ldr	r0, [r4, #0]
 800403c:	4632      	mov	r2, r6
 800403e:	4641      	mov	r1, r8
 8004040:	f000 fab6 	bl	80045b0 <memmove>
 8004044:	68a3      	ldr	r3, [r4, #8]
 8004046:	1b9b      	subs	r3, r3, r6
 8004048:	60a3      	str	r3, [r4, #8]
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	4433      	add	r3, r6
 800404e:	6023      	str	r3, [r4, #0]
 8004050:	2000      	movs	r0, #0
 8004052:	e7db      	b.n	800400c <__ssputs_r+0x58>
 8004054:	462a      	mov	r2, r5
 8004056:	f000 fba5 	bl	80047a4 <_realloc_r>
 800405a:	4606      	mov	r6, r0
 800405c:	2800      	cmp	r0, #0
 800405e:	d1e1      	bne.n	8004024 <__ssputs_r+0x70>
 8004060:	6921      	ldr	r1, [r4, #16]
 8004062:	4650      	mov	r0, sl
 8004064:	f000 fabe 	bl	80045e4 <_free_r>
 8004068:	e7c7      	b.n	8003ffa <__ssputs_r+0x46>
	...

0800406c <_svfiprintf_r>:
 800406c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004070:	4698      	mov	r8, r3
 8004072:	898b      	ldrh	r3, [r1, #12]
 8004074:	061b      	lsls	r3, r3, #24
 8004076:	b09d      	sub	sp, #116	; 0x74
 8004078:	4607      	mov	r7, r0
 800407a:	460d      	mov	r5, r1
 800407c:	4614      	mov	r4, r2
 800407e:	d50e      	bpl.n	800409e <_svfiprintf_r+0x32>
 8004080:	690b      	ldr	r3, [r1, #16]
 8004082:	b963      	cbnz	r3, 800409e <_svfiprintf_r+0x32>
 8004084:	2140      	movs	r1, #64	; 0x40
 8004086:	f000 fb19 	bl	80046bc <_malloc_r>
 800408a:	6028      	str	r0, [r5, #0]
 800408c:	6128      	str	r0, [r5, #16]
 800408e:	b920      	cbnz	r0, 800409a <_svfiprintf_r+0x2e>
 8004090:	230c      	movs	r3, #12
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	f04f 30ff 	mov.w	r0, #4294967295
 8004098:	e0d1      	b.n	800423e <_svfiprintf_r+0x1d2>
 800409a:	2340      	movs	r3, #64	; 0x40
 800409c:	616b      	str	r3, [r5, #20]
 800409e:	2300      	movs	r3, #0
 80040a0:	9309      	str	r3, [sp, #36]	; 0x24
 80040a2:	2320      	movs	r3, #32
 80040a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80040ac:	2330      	movs	r3, #48	; 0x30
 80040ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004258 <_svfiprintf_r+0x1ec>
 80040b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040b6:	f04f 0901 	mov.w	r9, #1
 80040ba:	4623      	mov	r3, r4
 80040bc:	469a      	mov	sl, r3
 80040be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040c2:	b10a      	cbz	r2, 80040c8 <_svfiprintf_r+0x5c>
 80040c4:	2a25      	cmp	r2, #37	; 0x25
 80040c6:	d1f9      	bne.n	80040bc <_svfiprintf_r+0x50>
 80040c8:	ebba 0b04 	subs.w	fp, sl, r4
 80040cc:	d00b      	beq.n	80040e6 <_svfiprintf_r+0x7a>
 80040ce:	465b      	mov	r3, fp
 80040d0:	4622      	mov	r2, r4
 80040d2:	4629      	mov	r1, r5
 80040d4:	4638      	mov	r0, r7
 80040d6:	f7ff ff6d 	bl	8003fb4 <__ssputs_r>
 80040da:	3001      	adds	r0, #1
 80040dc:	f000 80aa 	beq.w	8004234 <_svfiprintf_r+0x1c8>
 80040e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040e2:	445a      	add	r2, fp
 80040e4:	9209      	str	r2, [sp, #36]	; 0x24
 80040e6:	f89a 3000 	ldrb.w	r3, [sl]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 80a2 	beq.w	8004234 <_svfiprintf_r+0x1c8>
 80040f0:	2300      	movs	r3, #0
 80040f2:	f04f 32ff 	mov.w	r2, #4294967295
 80040f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040fa:	f10a 0a01 	add.w	sl, sl, #1
 80040fe:	9304      	str	r3, [sp, #16]
 8004100:	9307      	str	r3, [sp, #28]
 8004102:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004106:	931a      	str	r3, [sp, #104]	; 0x68
 8004108:	4654      	mov	r4, sl
 800410a:	2205      	movs	r2, #5
 800410c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004110:	4851      	ldr	r0, [pc, #324]	; (8004258 <_svfiprintf_r+0x1ec>)
 8004112:	f7fc f865 	bl	80001e0 <memchr>
 8004116:	9a04      	ldr	r2, [sp, #16]
 8004118:	b9d8      	cbnz	r0, 8004152 <_svfiprintf_r+0xe6>
 800411a:	06d0      	lsls	r0, r2, #27
 800411c:	bf44      	itt	mi
 800411e:	2320      	movmi	r3, #32
 8004120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004124:	0711      	lsls	r1, r2, #28
 8004126:	bf44      	itt	mi
 8004128:	232b      	movmi	r3, #43	; 0x2b
 800412a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800412e:	f89a 3000 	ldrb.w	r3, [sl]
 8004132:	2b2a      	cmp	r3, #42	; 0x2a
 8004134:	d015      	beq.n	8004162 <_svfiprintf_r+0xf6>
 8004136:	9a07      	ldr	r2, [sp, #28]
 8004138:	4654      	mov	r4, sl
 800413a:	2000      	movs	r0, #0
 800413c:	f04f 0c0a 	mov.w	ip, #10
 8004140:	4621      	mov	r1, r4
 8004142:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004146:	3b30      	subs	r3, #48	; 0x30
 8004148:	2b09      	cmp	r3, #9
 800414a:	d94e      	bls.n	80041ea <_svfiprintf_r+0x17e>
 800414c:	b1b0      	cbz	r0, 800417c <_svfiprintf_r+0x110>
 800414e:	9207      	str	r2, [sp, #28]
 8004150:	e014      	b.n	800417c <_svfiprintf_r+0x110>
 8004152:	eba0 0308 	sub.w	r3, r0, r8
 8004156:	fa09 f303 	lsl.w	r3, r9, r3
 800415a:	4313      	orrs	r3, r2
 800415c:	9304      	str	r3, [sp, #16]
 800415e:	46a2      	mov	sl, r4
 8004160:	e7d2      	b.n	8004108 <_svfiprintf_r+0x9c>
 8004162:	9b03      	ldr	r3, [sp, #12]
 8004164:	1d19      	adds	r1, r3, #4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	9103      	str	r1, [sp, #12]
 800416a:	2b00      	cmp	r3, #0
 800416c:	bfbb      	ittet	lt
 800416e:	425b      	neglt	r3, r3
 8004170:	f042 0202 	orrlt.w	r2, r2, #2
 8004174:	9307      	strge	r3, [sp, #28]
 8004176:	9307      	strlt	r3, [sp, #28]
 8004178:	bfb8      	it	lt
 800417a:	9204      	strlt	r2, [sp, #16]
 800417c:	7823      	ldrb	r3, [r4, #0]
 800417e:	2b2e      	cmp	r3, #46	; 0x2e
 8004180:	d10c      	bne.n	800419c <_svfiprintf_r+0x130>
 8004182:	7863      	ldrb	r3, [r4, #1]
 8004184:	2b2a      	cmp	r3, #42	; 0x2a
 8004186:	d135      	bne.n	80041f4 <_svfiprintf_r+0x188>
 8004188:	9b03      	ldr	r3, [sp, #12]
 800418a:	1d1a      	adds	r2, r3, #4
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	9203      	str	r2, [sp, #12]
 8004190:	2b00      	cmp	r3, #0
 8004192:	bfb8      	it	lt
 8004194:	f04f 33ff 	movlt.w	r3, #4294967295
 8004198:	3402      	adds	r4, #2
 800419a:	9305      	str	r3, [sp, #20]
 800419c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004268 <_svfiprintf_r+0x1fc>
 80041a0:	7821      	ldrb	r1, [r4, #0]
 80041a2:	2203      	movs	r2, #3
 80041a4:	4650      	mov	r0, sl
 80041a6:	f7fc f81b 	bl	80001e0 <memchr>
 80041aa:	b140      	cbz	r0, 80041be <_svfiprintf_r+0x152>
 80041ac:	2340      	movs	r3, #64	; 0x40
 80041ae:	eba0 000a 	sub.w	r0, r0, sl
 80041b2:	fa03 f000 	lsl.w	r0, r3, r0
 80041b6:	9b04      	ldr	r3, [sp, #16]
 80041b8:	4303      	orrs	r3, r0
 80041ba:	3401      	adds	r4, #1
 80041bc:	9304      	str	r3, [sp, #16]
 80041be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041c2:	4826      	ldr	r0, [pc, #152]	; (800425c <_svfiprintf_r+0x1f0>)
 80041c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041c8:	2206      	movs	r2, #6
 80041ca:	f7fc f809 	bl	80001e0 <memchr>
 80041ce:	2800      	cmp	r0, #0
 80041d0:	d038      	beq.n	8004244 <_svfiprintf_r+0x1d8>
 80041d2:	4b23      	ldr	r3, [pc, #140]	; (8004260 <_svfiprintf_r+0x1f4>)
 80041d4:	bb1b      	cbnz	r3, 800421e <_svfiprintf_r+0x1b2>
 80041d6:	9b03      	ldr	r3, [sp, #12]
 80041d8:	3307      	adds	r3, #7
 80041da:	f023 0307 	bic.w	r3, r3, #7
 80041de:	3308      	adds	r3, #8
 80041e0:	9303      	str	r3, [sp, #12]
 80041e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041e4:	4433      	add	r3, r6
 80041e6:	9309      	str	r3, [sp, #36]	; 0x24
 80041e8:	e767      	b.n	80040ba <_svfiprintf_r+0x4e>
 80041ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80041ee:	460c      	mov	r4, r1
 80041f0:	2001      	movs	r0, #1
 80041f2:	e7a5      	b.n	8004140 <_svfiprintf_r+0xd4>
 80041f4:	2300      	movs	r3, #0
 80041f6:	3401      	adds	r4, #1
 80041f8:	9305      	str	r3, [sp, #20]
 80041fa:	4619      	mov	r1, r3
 80041fc:	f04f 0c0a 	mov.w	ip, #10
 8004200:	4620      	mov	r0, r4
 8004202:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004206:	3a30      	subs	r2, #48	; 0x30
 8004208:	2a09      	cmp	r2, #9
 800420a:	d903      	bls.n	8004214 <_svfiprintf_r+0x1a8>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0c5      	beq.n	800419c <_svfiprintf_r+0x130>
 8004210:	9105      	str	r1, [sp, #20]
 8004212:	e7c3      	b.n	800419c <_svfiprintf_r+0x130>
 8004214:	fb0c 2101 	mla	r1, ip, r1, r2
 8004218:	4604      	mov	r4, r0
 800421a:	2301      	movs	r3, #1
 800421c:	e7f0      	b.n	8004200 <_svfiprintf_r+0x194>
 800421e:	ab03      	add	r3, sp, #12
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	462a      	mov	r2, r5
 8004224:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <_svfiprintf_r+0x1f8>)
 8004226:	a904      	add	r1, sp, #16
 8004228:	4638      	mov	r0, r7
 800422a:	f3af 8000 	nop.w
 800422e:	1c42      	adds	r2, r0, #1
 8004230:	4606      	mov	r6, r0
 8004232:	d1d6      	bne.n	80041e2 <_svfiprintf_r+0x176>
 8004234:	89ab      	ldrh	r3, [r5, #12]
 8004236:	065b      	lsls	r3, r3, #25
 8004238:	f53f af2c 	bmi.w	8004094 <_svfiprintf_r+0x28>
 800423c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800423e:	b01d      	add	sp, #116	; 0x74
 8004240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004244:	ab03      	add	r3, sp, #12
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	462a      	mov	r2, r5
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <_svfiprintf_r+0x1f8>)
 800424c:	a904      	add	r1, sp, #16
 800424e:	4638      	mov	r0, r7
 8004250:	f000 f87a 	bl	8004348 <_printf_i>
 8004254:	e7eb      	b.n	800422e <_svfiprintf_r+0x1c2>
 8004256:	bf00      	nop
 8004258:	0800493c 	.word	0x0800493c
 800425c:	08004946 	.word	0x08004946
 8004260:	00000000 	.word	0x00000000
 8004264:	08003fb5 	.word	0x08003fb5
 8004268:	08004942 	.word	0x08004942

0800426c <_printf_common>:
 800426c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004270:	4616      	mov	r6, r2
 8004272:	4699      	mov	r9, r3
 8004274:	688a      	ldr	r2, [r1, #8]
 8004276:	690b      	ldr	r3, [r1, #16]
 8004278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800427c:	4293      	cmp	r3, r2
 800427e:	bfb8      	it	lt
 8004280:	4613      	movlt	r3, r2
 8004282:	6033      	str	r3, [r6, #0]
 8004284:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004288:	4607      	mov	r7, r0
 800428a:	460c      	mov	r4, r1
 800428c:	b10a      	cbz	r2, 8004292 <_printf_common+0x26>
 800428e:	3301      	adds	r3, #1
 8004290:	6033      	str	r3, [r6, #0]
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	0699      	lsls	r1, r3, #26
 8004296:	bf42      	ittt	mi
 8004298:	6833      	ldrmi	r3, [r6, #0]
 800429a:	3302      	addmi	r3, #2
 800429c:	6033      	strmi	r3, [r6, #0]
 800429e:	6825      	ldr	r5, [r4, #0]
 80042a0:	f015 0506 	ands.w	r5, r5, #6
 80042a4:	d106      	bne.n	80042b4 <_printf_common+0x48>
 80042a6:	f104 0a19 	add.w	sl, r4, #25
 80042aa:	68e3      	ldr	r3, [r4, #12]
 80042ac:	6832      	ldr	r2, [r6, #0]
 80042ae:	1a9b      	subs	r3, r3, r2
 80042b0:	42ab      	cmp	r3, r5
 80042b2:	dc26      	bgt.n	8004302 <_printf_common+0x96>
 80042b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042b8:	1e13      	subs	r3, r2, #0
 80042ba:	6822      	ldr	r2, [r4, #0]
 80042bc:	bf18      	it	ne
 80042be:	2301      	movne	r3, #1
 80042c0:	0692      	lsls	r2, r2, #26
 80042c2:	d42b      	bmi.n	800431c <_printf_common+0xb0>
 80042c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042c8:	4649      	mov	r1, r9
 80042ca:	4638      	mov	r0, r7
 80042cc:	47c0      	blx	r8
 80042ce:	3001      	adds	r0, #1
 80042d0:	d01e      	beq.n	8004310 <_printf_common+0xa4>
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	68e5      	ldr	r5, [r4, #12]
 80042d6:	6832      	ldr	r2, [r6, #0]
 80042d8:	f003 0306 	and.w	r3, r3, #6
 80042dc:	2b04      	cmp	r3, #4
 80042de:	bf08      	it	eq
 80042e0:	1aad      	subeq	r5, r5, r2
 80042e2:	68a3      	ldr	r3, [r4, #8]
 80042e4:	6922      	ldr	r2, [r4, #16]
 80042e6:	bf0c      	ite	eq
 80042e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042ec:	2500      	movne	r5, #0
 80042ee:	4293      	cmp	r3, r2
 80042f0:	bfc4      	itt	gt
 80042f2:	1a9b      	subgt	r3, r3, r2
 80042f4:	18ed      	addgt	r5, r5, r3
 80042f6:	2600      	movs	r6, #0
 80042f8:	341a      	adds	r4, #26
 80042fa:	42b5      	cmp	r5, r6
 80042fc:	d11a      	bne.n	8004334 <_printf_common+0xc8>
 80042fe:	2000      	movs	r0, #0
 8004300:	e008      	b.n	8004314 <_printf_common+0xa8>
 8004302:	2301      	movs	r3, #1
 8004304:	4652      	mov	r2, sl
 8004306:	4649      	mov	r1, r9
 8004308:	4638      	mov	r0, r7
 800430a:	47c0      	blx	r8
 800430c:	3001      	adds	r0, #1
 800430e:	d103      	bne.n	8004318 <_printf_common+0xac>
 8004310:	f04f 30ff 	mov.w	r0, #4294967295
 8004314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004318:	3501      	adds	r5, #1
 800431a:	e7c6      	b.n	80042aa <_printf_common+0x3e>
 800431c:	18e1      	adds	r1, r4, r3
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	2030      	movs	r0, #48	; 0x30
 8004322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004326:	4422      	add	r2, r4
 8004328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800432c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004330:	3302      	adds	r3, #2
 8004332:	e7c7      	b.n	80042c4 <_printf_common+0x58>
 8004334:	2301      	movs	r3, #1
 8004336:	4622      	mov	r2, r4
 8004338:	4649      	mov	r1, r9
 800433a:	4638      	mov	r0, r7
 800433c:	47c0      	blx	r8
 800433e:	3001      	adds	r0, #1
 8004340:	d0e6      	beq.n	8004310 <_printf_common+0xa4>
 8004342:	3601      	adds	r6, #1
 8004344:	e7d9      	b.n	80042fa <_printf_common+0x8e>
	...

08004348 <_printf_i>:
 8004348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800434c:	7e0f      	ldrb	r7, [r1, #24]
 800434e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004350:	2f78      	cmp	r7, #120	; 0x78
 8004352:	4691      	mov	r9, r2
 8004354:	4680      	mov	r8, r0
 8004356:	460c      	mov	r4, r1
 8004358:	469a      	mov	sl, r3
 800435a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800435e:	d807      	bhi.n	8004370 <_printf_i+0x28>
 8004360:	2f62      	cmp	r7, #98	; 0x62
 8004362:	d80a      	bhi.n	800437a <_printf_i+0x32>
 8004364:	2f00      	cmp	r7, #0
 8004366:	f000 80d8 	beq.w	800451a <_printf_i+0x1d2>
 800436a:	2f58      	cmp	r7, #88	; 0x58
 800436c:	f000 80a3 	beq.w	80044b6 <_printf_i+0x16e>
 8004370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004378:	e03a      	b.n	80043f0 <_printf_i+0xa8>
 800437a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800437e:	2b15      	cmp	r3, #21
 8004380:	d8f6      	bhi.n	8004370 <_printf_i+0x28>
 8004382:	a101      	add	r1, pc, #4	; (adr r1, 8004388 <_printf_i+0x40>)
 8004384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004388:	080043e1 	.word	0x080043e1
 800438c:	080043f5 	.word	0x080043f5
 8004390:	08004371 	.word	0x08004371
 8004394:	08004371 	.word	0x08004371
 8004398:	08004371 	.word	0x08004371
 800439c:	08004371 	.word	0x08004371
 80043a0:	080043f5 	.word	0x080043f5
 80043a4:	08004371 	.word	0x08004371
 80043a8:	08004371 	.word	0x08004371
 80043ac:	08004371 	.word	0x08004371
 80043b0:	08004371 	.word	0x08004371
 80043b4:	08004501 	.word	0x08004501
 80043b8:	08004425 	.word	0x08004425
 80043bc:	080044e3 	.word	0x080044e3
 80043c0:	08004371 	.word	0x08004371
 80043c4:	08004371 	.word	0x08004371
 80043c8:	08004523 	.word	0x08004523
 80043cc:	08004371 	.word	0x08004371
 80043d0:	08004425 	.word	0x08004425
 80043d4:	08004371 	.word	0x08004371
 80043d8:	08004371 	.word	0x08004371
 80043dc:	080044eb 	.word	0x080044eb
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	1d1a      	adds	r2, r3, #4
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	602a      	str	r2, [r5, #0]
 80043e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0a3      	b.n	800453c <_printf_i+0x1f4>
 80043f4:	6820      	ldr	r0, [r4, #0]
 80043f6:	6829      	ldr	r1, [r5, #0]
 80043f8:	0606      	lsls	r6, r0, #24
 80043fa:	f101 0304 	add.w	r3, r1, #4
 80043fe:	d50a      	bpl.n	8004416 <_printf_i+0xce>
 8004400:	680e      	ldr	r6, [r1, #0]
 8004402:	602b      	str	r3, [r5, #0]
 8004404:	2e00      	cmp	r6, #0
 8004406:	da03      	bge.n	8004410 <_printf_i+0xc8>
 8004408:	232d      	movs	r3, #45	; 0x2d
 800440a:	4276      	negs	r6, r6
 800440c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004410:	485e      	ldr	r0, [pc, #376]	; (800458c <_printf_i+0x244>)
 8004412:	230a      	movs	r3, #10
 8004414:	e019      	b.n	800444a <_printf_i+0x102>
 8004416:	680e      	ldr	r6, [r1, #0]
 8004418:	602b      	str	r3, [r5, #0]
 800441a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800441e:	bf18      	it	ne
 8004420:	b236      	sxthne	r6, r6
 8004422:	e7ef      	b.n	8004404 <_printf_i+0xbc>
 8004424:	682b      	ldr	r3, [r5, #0]
 8004426:	6820      	ldr	r0, [r4, #0]
 8004428:	1d19      	adds	r1, r3, #4
 800442a:	6029      	str	r1, [r5, #0]
 800442c:	0601      	lsls	r1, r0, #24
 800442e:	d501      	bpl.n	8004434 <_printf_i+0xec>
 8004430:	681e      	ldr	r6, [r3, #0]
 8004432:	e002      	b.n	800443a <_printf_i+0xf2>
 8004434:	0646      	lsls	r6, r0, #25
 8004436:	d5fb      	bpl.n	8004430 <_printf_i+0xe8>
 8004438:	881e      	ldrh	r6, [r3, #0]
 800443a:	4854      	ldr	r0, [pc, #336]	; (800458c <_printf_i+0x244>)
 800443c:	2f6f      	cmp	r7, #111	; 0x6f
 800443e:	bf0c      	ite	eq
 8004440:	2308      	moveq	r3, #8
 8004442:	230a      	movne	r3, #10
 8004444:	2100      	movs	r1, #0
 8004446:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800444a:	6865      	ldr	r5, [r4, #4]
 800444c:	60a5      	str	r5, [r4, #8]
 800444e:	2d00      	cmp	r5, #0
 8004450:	bfa2      	ittt	ge
 8004452:	6821      	ldrge	r1, [r4, #0]
 8004454:	f021 0104 	bicge.w	r1, r1, #4
 8004458:	6021      	strge	r1, [r4, #0]
 800445a:	b90e      	cbnz	r6, 8004460 <_printf_i+0x118>
 800445c:	2d00      	cmp	r5, #0
 800445e:	d04d      	beq.n	80044fc <_printf_i+0x1b4>
 8004460:	4615      	mov	r5, r2
 8004462:	fbb6 f1f3 	udiv	r1, r6, r3
 8004466:	fb03 6711 	mls	r7, r3, r1, r6
 800446a:	5dc7      	ldrb	r7, [r0, r7]
 800446c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004470:	4637      	mov	r7, r6
 8004472:	42bb      	cmp	r3, r7
 8004474:	460e      	mov	r6, r1
 8004476:	d9f4      	bls.n	8004462 <_printf_i+0x11a>
 8004478:	2b08      	cmp	r3, #8
 800447a:	d10b      	bne.n	8004494 <_printf_i+0x14c>
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	07de      	lsls	r6, r3, #31
 8004480:	d508      	bpl.n	8004494 <_printf_i+0x14c>
 8004482:	6923      	ldr	r3, [r4, #16]
 8004484:	6861      	ldr	r1, [r4, #4]
 8004486:	4299      	cmp	r1, r3
 8004488:	bfde      	ittt	le
 800448a:	2330      	movle	r3, #48	; 0x30
 800448c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004490:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004494:	1b52      	subs	r2, r2, r5
 8004496:	6122      	str	r2, [r4, #16]
 8004498:	f8cd a000 	str.w	sl, [sp]
 800449c:	464b      	mov	r3, r9
 800449e:	aa03      	add	r2, sp, #12
 80044a0:	4621      	mov	r1, r4
 80044a2:	4640      	mov	r0, r8
 80044a4:	f7ff fee2 	bl	800426c <_printf_common>
 80044a8:	3001      	adds	r0, #1
 80044aa:	d14c      	bne.n	8004546 <_printf_i+0x1fe>
 80044ac:	f04f 30ff 	mov.w	r0, #4294967295
 80044b0:	b004      	add	sp, #16
 80044b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b6:	4835      	ldr	r0, [pc, #212]	; (800458c <_printf_i+0x244>)
 80044b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80044bc:	6829      	ldr	r1, [r5, #0]
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80044c4:	6029      	str	r1, [r5, #0]
 80044c6:	061d      	lsls	r5, r3, #24
 80044c8:	d514      	bpl.n	80044f4 <_printf_i+0x1ac>
 80044ca:	07df      	lsls	r7, r3, #31
 80044cc:	bf44      	itt	mi
 80044ce:	f043 0320 	orrmi.w	r3, r3, #32
 80044d2:	6023      	strmi	r3, [r4, #0]
 80044d4:	b91e      	cbnz	r6, 80044de <_printf_i+0x196>
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	f023 0320 	bic.w	r3, r3, #32
 80044dc:	6023      	str	r3, [r4, #0]
 80044de:	2310      	movs	r3, #16
 80044e0:	e7b0      	b.n	8004444 <_printf_i+0xfc>
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	f043 0320 	orr.w	r3, r3, #32
 80044e8:	6023      	str	r3, [r4, #0]
 80044ea:	2378      	movs	r3, #120	; 0x78
 80044ec:	4828      	ldr	r0, [pc, #160]	; (8004590 <_printf_i+0x248>)
 80044ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044f2:	e7e3      	b.n	80044bc <_printf_i+0x174>
 80044f4:	0659      	lsls	r1, r3, #25
 80044f6:	bf48      	it	mi
 80044f8:	b2b6      	uxthmi	r6, r6
 80044fa:	e7e6      	b.n	80044ca <_printf_i+0x182>
 80044fc:	4615      	mov	r5, r2
 80044fe:	e7bb      	b.n	8004478 <_printf_i+0x130>
 8004500:	682b      	ldr	r3, [r5, #0]
 8004502:	6826      	ldr	r6, [r4, #0]
 8004504:	6961      	ldr	r1, [r4, #20]
 8004506:	1d18      	adds	r0, r3, #4
 8004508:	6028      	str	r0, [r5, #0]
 800450a:	0635      	lsls	r5, r6, #24
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	d501      	bpl.n	8004514 <_printf_i+0x1cc>
 8004510:	6019      	str	r1, [r3, #0]
 8004512:	e002      	b.n	800451a <_printf_i+0x1d2>
 8004514:	0670      	lsls	r0, r6, #25
 8004516:	d5fb      	bpl.n	8004510 <_printf_i+0x1c8>
 8004518:	8019      	strh	r1, [r3, #0]
 800451a:	2300      	movs	r3, #0
 800451c:	6123      	str	r3, [r4, #16]
 800451e:	4615      	mov	r5, r2
 8004520:	e7ba      	b.n	8004498 <_printf_i+0x150>
 8004522:	682b      	ldr	r3, [r5, #0]
 8004524:	1d1a      	adds	r2, r3, #4
 8004526:	602a      	str	r2, [r5, #0]
 8004528:	681d      	ldr	r5, [r3, #0]
 800452a:	6862      	ldr	r2, [r4, #4]
 800452c:	2100      	movs	r1, #0
 800452e:	4628      	mov	r0, r5
 8004530:	f7fb fe56 	bl	80001e0 <memchr>
 8004534:	b108      	cbz	r0, 800453a <_printf_i+0x1f2>
 8004536:	1b40      	subs	r0, r0, r5
 8004538:	6060      	str	r0, [r4, #4]
 800453a:	6863      	ldr	r3, [r4, #4]
 800453c:	6123      	str	r3, [r4, #16]
 800453e:	2300      	movs	r3, #0
 8004540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004544:	e7a8      	b.n	8004498 <_printf_i+0x150>
 8004546:	6923      	ldr	r3, [r4, #16]
 8004548:	462a      	mov	r2, r5
 800454a:	4649      	mov	r1, r9
 800454c:	4640      	mov	r0, r8
 800454e:	47d0      	blx	sl
 8004550:	3001      	adds	r0, #1
 8004552:	d0ab      	beq.n	80044ac <_printf_i+0x164>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	079b      	lsls	r3, r3, #30
 8004558:	d413      	bmi.n	8004582 <_printf_i+0x23a>
 800455a:	68e0      	ldr	r0, [r4, #12]
 800455c:	9b03      	ldr	r3, [sp, #12]
 800455e:	4298      	cmp	r0, r3
 8004560:	bfb8      	it	lt
 8004562:	4618      	movlt	r0, r3
 8004564:	e7a4      	b.n	80044b0 <_printf_i+0x168>
 8004566:	2301      	movs	r3, #1
 8004568:	4632      	mov	r2, r6
 800456a:	4649      	mov	r1, r9
 800456c:	4640      	mov	r0, r8
 800456e:	47d0      	blx	sl
 8004570:	3001      	adds	r0, #1
 8004572:	d09b      	beq.n	80044ac <_printf_i+0x164>
 8004574:	3501      	adds	r5, #1
 8004576:	68e3      	ldr	r3, [r4, #12]
 8004578:	9903      	ldr	r1, [sp, #12]
 800457a:	1a5b      	subs	r3, r3, r1
 800457c:	42ab      	cmp	r3, r5
 800457e:	dcf2      	bgt.n	8004566 <_printf_i+0x21e>
 8004580:	e7eb      	b.n	800455a <_printf_i+0x212>
 8004582:	2500      	movs	r5, #0
 8004584:	f104 0619 	add.w	r6, r4, #25
 8004588:	e7f5      	b.n	8004576 <_printf_i+0x22e>
 800458a:	bf00      	nop
 800458c:	0800494d 	.word	0x0800494d
 8004590:	0800495e 	.word	0x0800495e

08004594 <memcpy>:
 8004594:	440a      	add	r2, r1
 8004596:	4291      	cmp	r1, r2
 8004598:	f100 33ff 	add.w	r3, r0, #4294967295
 800459c:	d100      	bne.n	80045a0 <memcpy+0xc>
 800459e:	4770      	bx	lr
 80045a0:	b510      	push	{r4, lr}
 80045a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045aa:	4291      	cmp	r1, r2
 80045ac:	d1f9      	bne.n	80045a2 <memcpy+0xe>
 80045ae:	bd10      	pop	{r4, pc}

080045b0 <memmove>:
 80045b0:	4288      	cmp	r0, r1
 80045b2:	b510      	push	{r4, lr}
 80045b4:	eb01 0402 	add.w	r4, r1, r2
 80045b8:	d902      	bls.n	80045c0 <memmove+0x10>
 80045ba:	4284      	cmp	r4, r0
 80045bc:	4623      	mov	r3, r4
 80045be:	d807      	bhi.n	80045d0 <memmove+0x20>
 80045c0:	1e43      	subs	r3, r0, #1
 80045c2:	42a1      	cmp	r1, r4
 80045c4:	d008      	beq.n	80045d8 <memmove+0x28>
 80045c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045ce:	e7f8      	b.n	80045c2 <memmove+0x12>
 80045d0:	4402      	add	r2, r0
 80045d2:	4601      	mov	r1, r0
 80045d4:	428a      	cmp	r2, r1
 80045d6:	d100      	bne.n	80045da <memmove+0x2a>
 80045d8:	bd10      	pop	{r4, pc}
 80045da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045e2:	e7f7      	b.n	80045d4 <memmove+0x24>

080045e4 <_free_r>:
 80045e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045e6:	2900      	cmp	r1, #0
 80045e8:	d044      	beq.n	8004674 <_free_r+0x90>
 80045ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045ee:	9001      	str	r0, [sp, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f1a1 0404 	sub.w	r4, r1, #4
 80045f6:	bfb8      	it	lt
 80045f8:	18e4      	addlt	r4, r4, r3
 80045fa:	f000 f913 	bl	8004824 <__malloc_lock>
 80045fe:	4a1e      	ldr	r2, [pc, #120]	; (8004678 <_free_r+0x94>)
 8004600:	9801      	ldr	r0, [sp, #4]
 8004602:	6813      	ldr	r3, [r2, #0]
 8004604:	b933      	cbnz	r3, 8004614 <_free_r+0x30>
 8004606:	6063      	str	r3, [r4, #4]
 8004608:	6014      	str	r4, [r2, #0]
 800460a:	b003      	add	sp, #12
 800460c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004610:	f000 b90e 	b.w	8004830 <__malloc_unlock>
 8004614:	42a3      	cmp	r3, r4
 8004616:	d908      	bls.n	800462a <_free_r+0x46>
 8004618:	6825      	ldr	r5, [r4, #0]
 800461a:	1961      	adds	r1, r4, r5
 800461c:	428b      	cmp	r3, r1
 800461e:	bf01      	itttt	eq
 8004620:	6819      	ldreq	r1, [r3, #0]
 8004622:	685b      	ldreq	r3, [r3, #4]
 8004624:	1949      	addeq	r1, r1, r5
 8004626:	6021      	streq	r1, [r4, #0]
 8004628:	e7ed      	b.n	8004606 <_free_r+0x22>
 800462a:	461a      	mov	r2, r3
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	b10b      	cbz	r3, 8004634 <_free_r+0x50>
 8004630:	42a3      	cmp	r3, r4
 8004632:	d9fa      	bls.n	800462a <_free_r+0x46>
 8004634:	6811      	ldr	r1, [r2, #0]
 8004636:	1855      	adds	r5, r2, r1
 8004638:	42a5      	cmp	r5, r4
 800463a:	d10b      	bne.n	8004654 <_free_r+0x70>
 800463c:	6824      	ldr	r4, [r4, #0]
 800463e:	4421      	add	r1, r4
 8004640:	1854      	adds	r4, r2, r1
 8004642:	42a3      	cmp	r3, r4
 8004644:	6011      	str	r1, [r2, #0]
 8004646:	d1e0      	bne.n	800460a <_free_r+0x26>
 8004648:	681c      	ldr	r4, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	6053      	str	r3, [r2, #4]
 800464e:	4421      	add	r1, r4
 8004650:	6011      	str	r1, [r2, #0]
 8004652:	e7da      	b.n	800460a <_free_r+0x26>
 8004654:	d902      	bls.n	800465c <_free_r+0x78>
 8004656:	230c      	movs	r3, #12
 8004658:	6003      	str	r3, [r0, #0]
 800465a:	e7d6      	b.n	800460a <_free_r+0x26>
 800465c:	6825      	ldr	r5, [r4, #0]
 800465e:	1961      	adds	r1, r4, r5
 8004660:	428b      	cmp	r3, r1
 8004662:	bf04      	itt	eq
 8004664:	6819      	ldreq	r1, [r3, #0]
 8004666:	685b      	ldreq	r3, [r3, #4]
 8004668:	6063      	str	r3, [r4, #4]
 800466a:	bf04      	itt	eq
 800466c:	1949      	addeq	r1, r1, r5
 800466e:	6021      	streq	r1, [r4, #0]
 8004670:	6054      	str	r4, [r2, #4]
 8004672:	e7ca      	b.n	800460a <_free_r+0x26>
 8004674:	b003      	add	sp, #12
 8004676:	bd30      	pop	{r4, r5, pc}
 8004678:	2000017c 	.word	0x2000017c

0800467c <sbrk_aligned>:
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	4e0e      	ldr	r6, [pc, #56]	; (80046b8 <sbrk_aligned+0x3c>)
 8004680:	460c      	mov	r4, r1
 8004682:	6831      	ldr	r1, [r6, #0]
 8004684:	4605      	mov	r5, r0
 8004686:	b911      	cbnz	r1, 800468e <sbrk_aligned+0x12>
 8004688:	f000 f8bc 	bl	8004804 <_sbrk_r>
 800468c:	6030      	str	r0, [r6, #0]
 800468e:	4621      	mov	r1, r4
 8004690:	4628      	mov	r0, r5
 8004692:	f000 f8b7 	bl	8004804 <_sbrk_r>
 8004696:	1c43      	adds	r3, r0, #1
 8004698:	d00a      	beq.n	80046b0 <sbrk_aligned+0x34>
 800469a:	1cc4      	adds	r4, r0, #3
 800469c:	f024 0403 	bic.w	r4, r4, #3
 80046a0:	42a0      	cmp	r0, r4
 80046a2:	d007      	beq.n	80046b4 <sbrk_aligned+0x38>
 80046a4:	1a21      	subs	r1, r4, r0
 80046a6:	4628      	mov	r0, r5
 80046a8:	f000 f8ac 	bl	8004804 <_sbrk_r>
 80046ac:	3001      	adds	r0, #1
 80046ae:	d101      	bne.n	80046b4 <sbrk_aligned+0x38>
 80046b0:	f04f 34ff 	mov.w	r4, #4294967295
 80046b4:	4620      	mov	r0, r4
 80046b6:	bd70      	pop	{r4, r5, r6, pc}
 80046b8:	20000180 	.word	0x20000180

080046bc <_malloc_r>:
 80046bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c0:	1ccd      	adds	r5, r1, #3
 80046c2:	f025 0503 	bic.w	r5, r5, #3
 80046c6:	3508      	adds	r5, #8
 80046c8:	2d0c      	cmp	r5, #12
 80046ca:	bf38      	it	cc
 80046cc:	250c      	movcc	r5, #12
 80046ce:	2d00      	cmp	r5, #0
 80046d0:	4607      	mov	r7, r0
 80046d2:	db01      	blt.n	80046d8 <_malloc_r+0x1c>
 80046d4:	42a9      	cmp	r1, r5
 80046d6:	d905      	bls.n	80046e4 <_malloc_r+0x28>
 80046d8:	230c      	movs	r3, #12
 80046da:	603b      	str	r3, [r7, #0]
 80046dc:	2600      	movs	r6, #0
 80046de:	4630      	mov	r0, r6
 80046e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046e4:	4e2e      	ldr	r6, [pc, #184]	; (80047a0 <_malloc_r+0xe4>)
 80046e6:	f000 f89d 	bl	8004824 <__malloc_lock>
 80046ea:	6833      	ldr	r3, [r6, #0]
 80046ec:	461c      	mov	r4, r3
 80046ee:	bb34      	cbnz	r4, 800473e <_malloc_r+0x82>
 80046f0:	4629      	mov	r1, r5
 80046f2:	4638      	mov	r0, r7
 80046f4:	f7ff ffc2 	bl	800467c <sbrk_aligned>
 80046f8:	1c43      	adds	r3, r0, #1
 80046fa:	4604      	mov	r4, r0
 80046fc:	d14d      	bne.n	800479a <_malloc_r+0xde>
 80046fe:	6834      	ldr	r4, [r6, #0]
 8004700:	4626      	mov	r6, r4
 8004702:	2e00      	cmp	r6, #0
 8004704:	d140      	bne.n	8004788 <_malloc_r+0xcc>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	4631      	mov	r1, r6
 800470a:	4638      	mov	r0, r7
 800470c:	eb04 0803 	add.w	r8, r4, r3
 8004710:	f000 f878 	bl	8004804 <_sbrk_r>
 8004714:	4580      	cmp	r8, r0
 8004716:	d13a      	bne.n	800478e <_malloc_r+0xd2>
 8004718:	6821      	ldr	r1, [r4, #0]
 800471a:	3503      	adds	r5, #3
 800471c:	1a6d      	subs	r5, r5, r1
 800471e:	f025 0503 	bic.w	r5, r5, #3
 8004722:	3508      	adds	r5, #8
 8004724:	2d0c      	cmp	r5, #12
 8004726:	bf38      	it	cc
 8004728:	250c      	movcc	r5, #12
 800472a:	4629      	mov	r1, r5
 800472c:	4638      	mov	r0, r7
 800472e:	f7ff ffa5 	bl	800467c <sbrk_aligned>
 8004732:	3001      	adds	r0, #1
 8004734:	d02b      	beq.n	800478e <_malloc_r+0xd2>
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	442b      	add	r3, r5
 800473a:	6023      	str	r3, [r4, #0]
 800473c:	e00e      	b.n	800475c <_malloc_r+0xa0>
 800473e:	6822      	ldr	r2, [r4, #0]
 8004740:	1b52      	subs	r2, r2, r5
 8004742:	d41e      	bmi.n	8004782 <_malloc_r+0xc6>
 8004744:	2a0b      	cmp	r2, #11
 8004746:	d916      	bls.n	8004776 <_malloc_r+0xba>
 8004748:	1961      	adds	r1, r4, r5
 800474a:	42a3      	cmp	r3, r4
 800474c:	6025      	str	r5, [r4, #0]
 800474e:	bf18      	it	ne
 8004750:	6059      	strne	r1, [r3, #4]
 8004752:	6863      	ldr	r3, [r4, #4]
 8004754:	bf08      	it	eq
 8004756:	6031      	streq	r1, [r6, #0]
 8004758:	5162      	str	r2, [r4, r5]
 800475a:	604b      	str	r3, [r1, #4]
 800475c:	4638      	mov	r0, r7
 800475e:	f104 060b 	add.w	r6, r4, #11
 8004762:	f000 f865 	bl	8004830 <__malloc_unlock>
 8004766:	f026 0607 	bic.w	r6, r6, #7
 800476a:	1d23      	adds	r3, r4, #4
 800476c:	1af2      	subs	r2, r6, r3
 800476e:	d0b6      	beq.n	80046de <_malloc_r+0x22>
 8004770:	1b9b      	subs	r3, r3, r6
 8004772:	50a3      	str	r3, [r4, r2]
 8004774:	e7b3      	b.n	80046de <_malloc_r+0x22>
 8004776:	6862      	ldr	r2, [r4, #4]
 8004778:	42a3      	cmp	r3, r4
 800477a:	bf0c      	ite	eq
 800477c:	6032      	streq	r2, [r6, #0]
 800477e:	605a      	strne	r2, [r3, #4]
 8004780:	e7ec      	b.n	800475c <_malloc_r+0xa0>
 8004782:	4623      	mov	r3, r4
 8004784:	6864      	ldr	r4, [r4, #4]
 8004786:	e7b2      	b.n	80046ee <_malloc_r+0x32>
 8004788:	4634      	mov	r4, r6
 800478a:	6876      	ldr	r6, [r6, #4]
 800478c:	e7b9      	b.n	8004702 <_malloc_r+0x46>
 800478e:	230c      	movs	r3, #12
 8004790:	603b      	str	r3, [r7, #0]
 8004792:	4638      	mov	r0, r7
 8004794:	f000 f84c 	bl	8004830 <__malloc_unlock>
 8004798:	e7a1      	b.n	80046de <_malloc_r+0x22>
 800479a:	6025      	str	r5, [r4, #0]
 800479c:	e7de      	b.n	800475c <_malloc_r+0xa0>
 800479e:	bf00      	nop
 80047a0:	2000017c 	.word	0x2000017c

080047a4 <_realloc_r>:
 80047a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047a8:	4680      	mov	r8, r0
 80047aa:	4614      	mov	r4, r2
 80047ac:	460e      	mov	r6, r1
 80047ae:	b921      	cbnz	r1, 80047ba <_realloc_r+0x16>
 80047b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047b4:	4611      	mov	r1, r2
 80047b6:	f7ff bf81 	b.w	80046bc <_malloc_r>
 80047ba:	b92a      	cbnz	r2, 80047c8 <_realloc_r+0x24>
 80047bc:	f7ff ff12 	bl	80045e4 <_free_r>
 80047c0:	4625      	mov	r5, r4
 80047c2:	4628      	mov	r0, r5
 80047c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047c8:	f000 f838 	bl	800483c <_malloc_usable_size_r>
 80047cc:	4284      	cmp	r4, r0
 80047ce:	4607      	mov	r7, r0
 80047d0:	d802      	bhi.n	80047d8 <_realloc_r+0x34>
 80047d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80047d6:	d812      	bhi.n	80047fe <_realloc_r+0x5a>
 80047d8:	4621      	mov	r1, r4
 80047da:	4640      	mov	r0, r8
 80047dc:	f7ff ff6e 	bl	80046bc <_malloc_r>
 80047e0:	4605      	mov	r5, r0
 80047e2:	2800      	cmp	r0, #0
 80047e4:	d0ed      	beq.n	80047c2 <_realloc_r+0x1e>
 80047e6:	42bc      	cmp	r4, r7
 80047e8:	4622      	mov	r2, r4
 80047ea:	4631      	mov	r1, r6
 80047ec:	bf28      	it	cs
 80047ee:	463a      	movcs	r2, r7
 80047f0:	f7ff fed0 	bl	8004594 <memcpy>
 80047f4:	4631      	mov	r1, r6
 80047f6:	4640      	mov	r0, r8
 80047f8:	f7ff fef4 	bl	80045e4 <_free_r>
 80047fc:	e7e1      	b.n	80047c2 <_realloc_r+0x1e>
 80047fe:	4635      	mov	r5, r6
 8004800:	e7df      	b.n	80047c2 <_realloc_r+0x1e>
	...

08004804 <_sbrk_r>:
 8004804:	b538      	push	{r3, r4, r5, lr}
 8004806:	4d06      	ldr	r5, [pc, #24]	; (8004820 <_sbrk_r+0x1c>)
 8004808:	2300      	movs	r3, #0
 800480a:	4604      	mov	r4, r0
 800480c:	4608      	mov	r0, r1
 800480e:	602b      	str	r3, [r5, #0]
 8004810:	f7fc f9ba 	bl	8000b88 <_sbrk>
 8004814:	1c43      	adds	r3, r0, #1
 8004816:	d102      	bne.n	800481e <_sbrk_r+0x1a>
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	b103      	cbz	r3, 800481e <_sbrk_r+0x1a>
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	bd38      	pop	{r3, r4, r5, pc}
 8004820:	20000184 	.word	0x20000184

08004824 <__malloc_lock>:
 8004824:	4801      	ldr	r0, [pc, #4]	; (800482c <__malloc_lock+0x8>)
 8004826:	f000 b811 	b.w	800484c <__retarget_lock_acquire_recursive>
 800482a:	bf00      	nop
 800482c:	20000188 	.word	0x20000188

08004830 <__malloc_unlock>:
 8004830:	4801      	ldr	r0, [pc, #4]	; (8004838 <__malloc_unlock+0x8>)
 8004832:	f000 b80c 	b.w	800484e <__retarget_lock_release_recursive>
 8004836:	bf00      	nop
 8004838:	20000188 	.word	0x20000188

0800483c <_malloc_usable_size_r>:
 800483c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004840:	1f18      	subs	r0, r3, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	bfbc      	itt	lt
 8004846:	580b      	ldrlt	r3, [r1, r0]
 8004848:	18c0      	addlt	r0, r0, r3
 800484a:	4770      	bx	lr

0800484c <__retarget_lock_acquire_recursive>:
 800484c:	4770      	bx	lr

0800484e <__retarget_lock_release_recursive>:
 800484e:	4770      	bx	lr

08004850 <_init>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	bf00      	nop
 8004854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004856:	bc08      	pop	{r3}
 8004858:	469e      	mov	lr, r3
 800485a:	4770      	bx	lr

0800485c <_fini>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	bf00      	nop
 8004860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004862:	bc08      	pop	{r3}
 8004864:	469e      	mov	lr, r3
 8004866:	4770      	bx	lr
